let r=[{id:1,title:"# Q1. What is the output of this code?",text:void 0,code2:'```cpp<br> vector<int> v(22);<br> bool b = (v[6]);<br> printf("%d", !b);<br> ',choices:["1. False","2. 0","3. 1","4. This code has an error."],answer:"3. 1"},{id:2,title:"# Q2. Which of the following is a reason why using this line is considered a bad practice? (_Alternative_: Why is using this line considered a bad practice?)",text:void 0,code2:"```cpp<br> using namespace std;<br> ",choices:["1. The compiled code is always bigger because of all of the imported symbols.","2. If the code uses a function defined in two different libraries with the same prototype but possibly with different implementations, there will be a compilation error due to ambiguity.","3. It automatically includes all header files in the standard library (cstdint, cstdlib, cstdio, iostream, etc).","4. It causes the compiler to enforce the exclusive inclusion of header files belonging to the standard library, generating a compilation error when a different header file is included."],answer:"2. If the code uses a function defined in two different libraries with the same prototype but possibly with different implementations, there will be a compilation error due to ambiguity."},{id:3,title:"# Q3. What is the smallest size a variable of the type child_t may occupy in memory?",text:void 0,code2:"```cpp<br> typedef struct{<br>     unsigned int  age    : 4;<br>     unsigned char gender : 1;<br>     unsigned int  size   : 2;<br> }child_t;<br> ",choices:["1. 7 bits.","2. 25 bytes.","3. 1 bit.","4. 1 byte."],answer:"4. 1 byte."},{id:4,title:"# Q4. What are the vectors v1 and v2 after executing the code?",text:void 0,code2:"```cpp<br> std::vector<int> v1{1,2,3},v2;<br> v2=v1;<br> v1.push_back(4);<br> v2.push_back(5);<br> ",choices:["1. Error","2. v1:{1,2,3,4}; v2:{5};","3. v1:{1,2,3,4,5}; v2:{1,2,3,4,5};","4. v1:{1,2,3,4}; v2:{1,2,3,5};"],answer:"4. v1:{1,2,3,4}; v2:{1,2,3,5};"},{id:5,title:"# Q5. Which of the following is a true statement about the difference between pointers and iterators?",text:void 0,code2:"  ",choices:["1. While pointers are variables that hold memory addresses, iterators are generic functions used to traverse containers. This function allows the programmer to implement read and write code as the container is traversed.","2. Incrementing an iterator always means accessing the next element in the container(if any), no matter the container. Incrementing the pointer means pointing to the next element in memory, not always the next element.","3. Pointers are variables that hold memory address whereas iterator is unsigned integers that refer to offsets in arrays.","4. All iterators are implemented with pointers so all iterators are pointers but not all pointers are iterators."],answer:"2. Incrementing an iterator always means accessing the next element in the container(if any), no matter the container. Incrementing the pointer means pointing to the next element in memory, not always the next element."},{id:6,title:"# Q6. What's the storage occupied by u1?",text:void 0,code2:"```cpp<br> union {<br>     uint16_t a;<br>     uint32_t b;<br>     int8_t c;<br> } u1;<br> ",choices:["1. 4 bytes","2. 7 bytes","3. 8 bytes","4. 2 bytes"],answer:"1. 4 bytes"},{id:7,title:"# Q7. Which of the following operator can be overloaded?",text:void 0,code2:"  ",choices:["1. `?:`","2. `new`","3. `::`","4. `.`"],answer:"2. `new`"},{id:9,title:"# Q9. Which of the following is not a difference between a class and a struct?",text:void 0,code2:"  ",choices:["1. Because structs are part of the C programming language, there is some complexity between C and C++ structs. This is not the case with classes.","2. Classes may have member functions; structs are private.","3. The default access specifier for members of a struct is public, whereas, for members of the class, it is private.","4. Template type parameters can be declared with classes, but not with the struct keyword."],answer:"4. Template type parameters can be declared with classes, but not with the struct keyword."},{id:11,title:"# Q11. What is an lvalue?",text:void 0,code2:"  ",choices:["1. It's a constant expression, meaning an expression composed of constants and operations.","2. It's an expression that represents an object with an address.","3. It's an expression suitable for the left-hand side operand in a binary operation.","4. It's a location value, meaning a memory address suitable for assigning to a pointer or reference."],answer:"4. It's a location value, meaning a memory address suitable for assigning to a pointer or reference."},{id:12,title:"# Q12. What does auto type specifier do in this line of code (since C++11)?",text:void 0,code2:"```cpp<br> auto x = 4000.22;<br> ",choices:["1. It specifies that the type of x will be deduced from the initializer - in this case, double.","2. It specifies that the type of x is automatic meaning that it can be assigned different types of data throughout the program.","3. It specifies that x is a variable with automatic storage duration.","4. It specifies that more memory will be allocated for x in case it needs more space, avoiding loss of data due to overflow."],answer:"1. It specifies that the type of x will be deduced from the initializer - in this case, double."},{id:13,title:"# Q13. A class template is a \\_?",text:void 0,code2:"  ",choices:["1. class written with the generic programming paradigm, specifying behavior in terms of type parameter rather than specific type.","2. blank superclass intended for inheritance and polymorphism.","3. class that only consists of a member variable, with no constructor, destructor, or member functions.","4. skeleton source code for a class where the programmer has to fill in specific parts to define the data types and algorithms used."],answer:"1. class written with the generic programming paradigm, specifying behavior in terms of type parameter rather than specific type."},{id:14,title:"# Q14. What is the ternary operator equivalent to this code snippet?",text:void 0,code2:"```cpp<br> if(x)<br>     y=a;<br> else<br>     y=b;<br> ",choices:["1. `y=a?b:x;`","2. `y=if(x?a:b);`","3. `y=(x&a)?a:(x&b)?b:0;`","4. `y=x?a:b;`"],answer:"4. `y=x?a:b;`"},{id:15,title:"# Q15. What is the output of the code given below?",text:void 0,code2:'```cpp<br> #include <iostream><br> <br> int main(){<br>     int x=10, y=20;<br>     std::cout << "x = " << x++ << " and y = " << --y << std::endl;<br>     std::cout << "x = " << x-- << " and y = " << ++y << std::endl;<br>     return(0);<br> }<br> ',choices:["1. `x = 10 and y = 20`","2. `x = 11 and y = 19`","3. `x = 10 and y = 19`","4. `x = 11 and y = 20`"],answer:"3. `x = 10 and y = 19`"},{id:16,title:"# Q16. What is the meaning of the two parts specified between parentheses in a range-based for loop, separated by a colon?",text:void 0,code2:"  ",choices:["1. The first is a variable declaration that will hold an element in a sequence. The second is the sequence to traverse.","2. The first is an iterator, and the second is the increment value to be added to the iterator.","3. The first is the iterating variable. The second is a `std::pair` that specifies the range (start and end) in which the variable will iterate.","4. The first is a container object. The second is a `std::pair` that specifies the range (start and end) in which the elements will be accessed within the loop."],answer:"1. The first is a variable declaration that will hold an element in a sequence. The second is the sequence to traverse."},{id:17,title:"# Q17. What is the output of the code given below?",text:void 0,code2:'```cpp<br> int8_t a=200;<br> uint8_t b=100;<br> if(a>b)<br>     std::cout<<"greater";<br> else<br>     std::cout<<"less";<br> ',choices:["1. There is no output because there is an exception when comparing an int8_t with a uint8_t.","2. greater","3. less","4. There is no output because there is a compiler error."],answer:"3. less"},{id:18,title:"# Q18. What is the output of this block of code?",text:void 0,code2:'```cpp<br> int8_t a=200;<br> uint8_t b=100;<br> std::cout<<"a="<<(int)a;<br> std::cout<<", b="<<(int)b;<br> ',choices:["1. a=-56, b=100","2. a=-55, b=100","3. a=200, b=-156","4. a=200, b=100"],answer:"1. a=-56, b=100"},{id:19,title:"# Q19. What is the output after executing this code snippet?",text:void 0,code2:"```cpp<br> int x=5, y=2;<br> if(x & y) {<br>     /*_part A_*/<br> }<br> else {<br>     /*_part B_*/<br> }<br> ",choices:["1. Part A executes because x==5 (true) and y==2 (true), thus the AND operation evaluates as true.","2. Part B executes because (x & y) results in 0, or false.","3. Part A executes because (x & y) results in a nonzero value, or true.","4. Part B executes because the statement (x & y) is invalid, thus false."],answer:"2. Part B executes because (x & y) results in 0, or false."},{id:20,title:"# Q20. What is a valid definition for the `get_length` function, which returns the length of a null-terminated string?",text:void 0,code2:"```cpp<br> int get_length(char *str) {<br>     int count=0;<br>     while(str[count++]);<br>     return count-1;<br> }<br> ```cpp<br> int get_length(char *str) {<br>     int count=0;<br>     while(str!=NULL){<br>         count++;<br>         str++;<br>     }<br>     return count;<br> }<br> ```cpp<br> int get_length(char *str) {<br>     int count=0;<br>     while((*str)++)<br>         count++;<br>     return count;<br> }<br> ```cpp<br> int get_length(char *str) {<br>     int count=0;<br>     while(str++)<br>         count++;<br>     return count;<br> }<br> ",choices:["1. A","2. B","3. C","4. D"],answer:"1. A"},{id:21,title:"# Q21. Which STL class is the best fit for implementing a collection of data that is always ordered so that the pop operation always gets the greatest of the elements? Suppose you are interested only in push and pop operations.",text:void 0,code2:"  ",choices:["1. `std::list`","2. `std::vector`","3. `std::priority_queue`","4. `std::map`"],answer:"3. `std::priority_queue`"},{id:22,title:"# Q22. What is the meaning of the three sections specified between parentheses in a for loop separated by semicolons?",text:void 0,code2:"  ",choices:["1. The first is the iterating variable name, the second is the number of times to iterate, and the third is the desired increment or decrement (specified with a signed integer).","2. The first is the initialization block, the second is the condition to iterate, and the third is the increment block.","3. The first is the iterating variable, the second is the container in which it should operate, and the third is an exit condition to abort at any time.","4. The first is the iterating variable name, the second is the starting value for the iterating variable, and the third is the stop value (the last value plus one)."],answer:"2. The first is the initialization block, the second is the condition to iterate, and the third is the increment block."},{id:23,title:"# Q23. What does this code print?",text:void 0,code2:'```cpp<br> int i = 0;<br> printf("%d", i++);<br> printf("%d", i--);<br> printf("%d", ++i);<br> printf("%d", --i);<br> ',choices:["1. 0,1,1,0","2. 0,1,0,1","3. 0,0,1,0","4. 1,0,1,0"],answer:"1. 0,1,1,0"},{id:24,title:"# Q24. What is true about the variable named `ptr`?",text:void 0,code2:"```cpp<br> void *ptr;<br> ",choices:["1. It is a pointer initialized at NULL.","2. It is a pointer to a void function.","3. That declaration causes a compiler error, as pointers must specify a type.","4. It is a pointer to a value with no specific type, so it may be cast to point to any type."],answer:"4. It is a pointer to a value with no specific type, so it may be cast to point to any type."},{id:25,title:"# Q25. What is the output of the code given below?",text:void 0,code2:"```cpp<br> int c=3; char d='A';<br> std::printf(\"c is %d and d is %c\",c,d);<br> ",choices:["1. c is d and d is c","2. c is A and d is 3","3. c is 3 and d is A","4. c is c and d is d"],answer:"3. c is 3 and d is A"},{id:26,title:"# Q26. What is the output of this code?",text:void 0,code2:'```cpp<br> printf("1/2 = %f",(float)(1/2));<br> ',choices:["1. 1/2 = 0.499999","2. 1/2 = 0","3. 1/2 = 0.000000","4. 1/2 = 0.5"],answer:"3. 1/2 = 0.000000"},{id:27,title:"# Q27. What is the difference between a public and a private class member?",text:void 0,code2:"  ",choices:["1. Public members are the same as global variables, so every part of the code has access to them. Private members are the same as automatic variables, so only their class has access to them.","2. Public members are made accessible to any running application. Private members are made accessible only to the application where the object is instantiated.","3. Public members will be compiled as shared variables in a multithreaded environment. Private members will be compiled as Thread-local variables.","4. Public members can be accessed by any function. Private members can be accessed only by the same class's member functions and the friends of the class."],answer:"4. Public members can be accessed by any function. Private members can be accessed only by the same class's member functions and the friends of the class."},{id:28,title:"# Q28. What is the value of `x` after executing this code?",text:void 0,code2:"```cpp<br> int x=10, a=-3;<br> x+=a;<br> ",choices:["1. 3","2. 7","3. -3","4. 13"],answer:"2. 7"},{id:29,title:"# Q29. Which statement is true?",text:void 0,code2:"  ",choices:["1. Only classes can have member variables and methods.","2. C++ supports multiple inheritance.","3. C++ supports only single inheritance.","4. Only structs can inherit."],answer:"2. C++ supports multiple inheritance."},{id:30,title:"# Q30. Consider a pointer to void, named `ptr`, which has been set to point to a floating point variable `g`. Which choice is a valid way to dereference `ptr` to assign its pointed value to a float variable `f` later in the program?",text:void 0,code2:"```cpp<br> float g;<br> void *ptr=&g;<br> ",choices:["1. `float f=*(float)ptr;`","2. `float f=(float *)ptr;`","3. `float f=(float)*ptr;`","4. `float f=*(float *)ptr;`"],answer:"4. `float f=*(float *)ptr;`"},{id:31,title:"# Q31. What is the `.*` operator and what does it do?",text:void 0,code2:"  ",choices:["1. It is the same as the class member access operator, or arrow operator `(->)`, which allows you to access a member of an object through a pointer to the object.","2. It is the pointer to the member operator, and it allows you to access a member of an object through a pointer to that specific class member.","3. It is the member access with an address of the operator, which returns the address of a class or struct member.","4. It is a combination of the member access operator `(.)` and the dereference operator `(*)`, so it allows you to access the object that a member pointer points to."],answer:"2. It is the pointer to the member operator, and it allows you to access a member of an object through a pointer to that specific class member."},{id:32,title:'# Q32. For these declarations, which choice shows four equivalent ways to assign the character "y" in the string to a char variable c?',text:void 0,code2:'```cpp<br> char buff[50] = "strings as arrays of characters are fun!"<br> char *str = buff+11;<br> char c;<br> ```cpp<br> c = buff[16];<br> c = str[5];<br> c = *(buff+16);<br> c = *(str+5);<br> ```cpp<br> c = *(buff[15]);<br> c = *(str[4]);<br> c = buff+15;<br> c = str+4;<br> ```cpp<br> c = buff[15];<br> c = str[4];<br> c = *(buff+15);<br> c = *(str+4);<br> ```cpp<br> c = *(buff[16]);<br> c = *(str[5]);<br> c = buff+16;<br> c = str+5;<br> ',choices:["1. A","2. B","3. C","4. D"],answer:"3. C"},{id:33,title:"# Q33. Which choice is the correct declaration for the class named Dog, derived from the Animal class?",text:void 0,code2:"```cpp<br> class Animal{<br>     //....<br> }<br> ```cpp<br> class Dog :: public Animal {<br>    //....<br> };<br> ```cpp<br> class Dog : public Animal {<br>    //....<br> };<br> ```cpp<br> public class Animal :: Dog {<br>    //....<br> };<br> ```cpp<br> public class Dog extends Animal {<br>    //....<br> };<br> ",choices:["1. A","2. B","3. C","4. D"],answer:"2. B"},{id:34,title:"# Q34. What is the output of this code given below?",text:void 0,code2:'```cpp<br> #include <cstdio><br> using namespace std;<br> <br> int main(){<br>     char c = 255;<br>     if(c>10)<br>         printf("c = %i, which is greater than 10", c);<br>     else<br>         printf("c = %i, which is less than 10", c);<br>     return 0;<br> }<br> ',choices:["1. c = -1, which is less than 10","2. c = 255, which is greater than 10","3. c = -1, which is greater than 10","4. c = 255, which is less than 10"],answer:"1. c = -1, which is less than 10"},{id:35,title:"# Q35. How can C++ code call a C function?",text:void 0,code2:"  ",choices:["1. by simply calling the C code","2. There is no way for C++ to call a C function",'3. by using extern "C"',"4. by importing the source C code"],answer:'3. by using extern "C"'},{id:36,title:"# Q36. Which choice is _not_ a valid type definition of a structure that contains x and y coordinates as integers, and that can be used exactly as shown for the variable named `center`?",text:void 0,code2:"```cpp<br> coord center;<br> center.x = 5;<br> center.y = 3;<br> ```cpp<br> typedef struct coord {<br>     int x;<br>     int y;<br> };<br> ```cpp<br> typedef struct coord {<br>     int x;<br>     int y;<br> } coord;<br> ```cpp<br> typedef struct {<br>     int x;<br>     int y;<br> } coord;<br> ```cpp<br> struct coord {<br>     int x;<br>     int y;<br> };<br> <br> typedef struct coord coord;<br> ",choices:["1. A","2. B","3. C","4. D"],answer:"1. A"},{id:37,title:"# Q37. Which choice does _not_ produce the same output as this code snippet? Assume the variable `i` will not be used anywhere else in the code.",text:void 0,code2:"```cpp<br> for (i=1;i<10;i++){<br>     cout<<i<<endl;<br> }<br> ```cpp<br> i=1;<br> while(i<10){<br>     cout<<++i<<endl;<br> }<br> ```cpp<br> for (int i:{1,2,3,4,5,6,7,8,9}) {<br>     cout<<i<<endl;<br> }<br> ```cpp<br> i = 1;<br> do {<br>     cout<<i++<<endl;<br> } while(i<10);<br> ```cpp<br> i = 1;<br> loop:<br>     cout<<i++<<endl;<br>     if(i<10) goto loop;<br> ",choices:["1. A","2. B","3. C","4. D"],answer:"1. A"},{id:38,title:"# Q38. What does this part of a main.cpp file do?",text:void 0,code2:'```cpp<br> #include "library.h"<br> ',choices:["1. It causes the toolchain to compile all the contents of library.h so that its executable code is available when needed by the final application.","2. It cherry-picks library.h for the declarations and definitions of all data and functions used in the remainder of the source file main.cpp, finally replacing the `#include` directive with those declarations and definitions.","3. It informs the linker that some functions or data used in the source file main.cpp are contained in library.h, so that they can be called in run time. This is also known as dynamic linking.","4. It causes the replacement of the `#include` directive by the entire contents of the source file library.h. This is similar to the Copy-Paste operation of library.h into main.cpp."],answer:"4. It causes the replacement of the `#include` directive by the entire contents of the source file library.h. This is similar to the Copy-Paste operation of library.h into main.cpp."},{id:39,title:"# Q39. Consider this function declaration of `is_even`, which takes in an integer and returns true if the argument is an even number and false otherwise. Which declarations are correct for overloaded versions of that function to support floating point numbers and string representations of numbers?",text:void 0,code2:"```cpp<br> bool is_even(int);<br> ```cpp<br> bool is_even(float f);<br> bool is_even(char *str);<br> ```cpp<br> bool is_even(float f);<br> bool is_even(char str);<br> ```cpp<br> bool is_even_float(float f);<br> bool is_even_str(char *str);<br> ```cpp<br> float is_even(float f);<br> char *is_even(char *str);<br> ",choices:["1. A","2. B","3. C","4. D"],answer:"1. A"},{id:40,title:"# Q40. Which choice is an include guard for the header file `my_library.h`?",text:void 0,code2:"```cpp<br> #ifdef MY_LIBRARY_H<br> #define MY_LIBRARY_H<br> <br> // my_library.h content<br> <br> #endif /* MY_LIBRARY_H */<br> ```cpp<br> #ifndef MY_LIBRARY_H<br> #define MY_LIBRARY_H<br> <br> // my_library.h content<br> <br> #endif /* MY_LIBRARY_H */<br> ```cpp<br> #ifdef MY_LIBRARY_H<br> #undef MY_LIBRARY_H<br> <br> // my_library.h content<br> <br> #endif /* MY_LIBRARY_H */<br> ```cpp<br> #define MY_LIBRARY_H<br> #include MY_LIBRARY_H<br> <br> // my_library.h content<br> <br> #undef MY_LIBRARY_H<br> ",choices:["1. A","2. B","3. C","4. D"],answer:"2. B"},{id:41,title:"# Q41. What's wrong with this definition when using a pre-C++11 compiler?",text:void 0,code2:"```cpp<br> std::vector<std::vector<int>> thematrix;<br> ",choices:["1. There's nothing wrong with it.","2. An `std::vector` cannot contain more `std::vector` containers as its elements.","3. The correct syntax should be: `std::vector[std::vector[int]] thematrix;`","4. `>>` is parsed as the shift-right operator, and thus results in a compile error."],answer:"1. There's nothing wrong with it."},{id:42,title:"# Q42. What is the statement below equivalent to?",text:void 0,code2:"  ",choices:[],answer:""},{id:43,title:"# Q42.b. What is the statement equivalent to?",text:void 0,code2:"```cpp<br> sprite->x<br> ",choices:["1. `sprite.x`","2. `sprite.*x`","3. `(*sprite).x`","4. `*sprite.x`"],answer:"3. `(*sprite).x`"},{id:44,title:"# Q43. Consider a class named `complexNumber`. Which code will result in an equivalent object?",text:void 0,code2:"```cpp<br> complexNumber(float real, float im)<br> : real_part(real),<br>  im_part(im){}<br> ```cpp<br> complexNumber(float real, float im) {<br>     this->real = real_part;<br>     this->im = im_part;<br> }<br> ```cpp<br> complexNumber(float real, float im) {<br>     this->real_part(real);<br>     this->im_part(im);<br> }<br> ```cpp<br> complexNumber(float real, float im) {<br>     this->real_part = real;<br>     this->im_part = im;<br> }<br> ```cpp<br> complexNumber(float real, float im) {<br>     this->real_part = &real;<br>     this->im_part = &im;<br> }<br> ",choices:["1. A","2. B","3. C","4. D"],answer:"3. C"},{id:45,title:"# Q44. What is the result of executing this code snippet?",text:void 0,code2:"```cpp<br> bool x=true, y=false;<br> <br> if (~x || y) {<br>     /*part A*/<br> } else {<br>     /*part B*/<br> }<br> ",choices:["1. Part A executes because the expression `(~x || y)` always results in true if `y==false`.","2. Part B executes because the statement `(~x || y)` is invalid, thus false.","3. Part A executes because `~x` is not zero, meaning true.","4. Part B executes because `~x` is false and `y` is false, thus the `OR` operation evaluates as false."],answer:"3. Part A executes because `~x` is not zero, meaning true."},{id:47,title:"# Q46. What is the output of this code?",text:void 0,code2:'```cpp<br> float values[5]={0.54f, 2.71828f, 3.14159f, 5.499999f, 10.0f};<br> for(auto f:values)<br>     printf("%i ",(int)(f+0.5f));<br> ',choices:["1. `0.54 2.71828 3.14159 5.499999 10.0`","2. `1 3 4 6 11`","3. `0 2 3 5 10`","4. `1 3 3 5 10`"],answer:"4. `1 3 3 5 10`"},{id:48,title:"# Q47. Which of the following STL classes is the best fit for implementing a phonebook? Suppose each entry contains a name and a phone number, with no duplicates, and you want to have a lookup by name.",text:void 0,code2:"  ",choices:["1. `std::priority_queue`","2. `std::list`","3. `std::vector`","4. `std::map`"],answer:"4. `std::map`"},{id:49,title:"# Q48. What does this program do?",text:void 0,code2:'```cpp<br> #include <iostream><br> #include <fstream><br> using namespace std;<br> <br> int main(){<br>     ifstream file1("text1.txt", ios::binary);<br>     ofstream file2("text2.txt", ios::binary);<br>     file2 << file1.rdbuf();<br> }<br> ',choices:["1. It renames text1.txt to text2.txt.","2. It makes a directory called text2.txt and moves text1.txt there.","3. It copies the contents of text1.txt into text2.txt - i.e., it makes a copy of text1.txt, named text2.txt.","4. It appends the contents of text1.txt into text2.txt - i.e., replaces the contents of text2.txt by the concatenation of text2.txt and text1.txt."],answer:"3. It copies the contents of text1.txt into text2.txt - i.e., it makes a copy of text1.txt, named text2.txt."},{id:50,title:"# Q49. Which of the following is _not_ a consequence of declaring the member variable `count` of my_class as static? / Alt.: Which statement is true when declaring the member variable `count` as static?",text:void 0,code2:"```cpp<br> class my_class {<br>     public: static int count;<br> }<br> ",choices:["1. The variable cannot be modified by any part of the code in the same application or thread. However, other threads may modify it.","2. The variable exists even when no objects of the class have been defined so it can be modified at any point in the source code.","3. The variable is allocated only once, regardless of how many objects are instantiated because it is bound to the class itself, not its instances.","4. All objects that try to access their count member variable actually refer to the only class-bound static count variable."],answer:"1. The variable cannot be modified by any part of the code in the same application or thread. However, other threads may modify it."},{id:52,title:"# Q51. What is an appropriate way of removing `my_object` as shown below?",text:void 0,code2:"```cpp<br> my_class *my_object = new my_class();<br> ",choices:["1. `delete(my_object);`","2. `free(my_object);`","3. The garbage collector will destroy the object eventually.","4. Exiting the scope will destroy the object."],answer:"1. `delete(my_object);`"},{id:53,title:"# Q52. What is the correct way to call the `count` member function for the object pointer called `grades`?",text:void 0,code2:"```cpp<br> class my_array{<br>     public:<br>         int count();<br> };  // ... more members above<br> <br> int main(){<br>     my_array *grades = new my_array();<br> };  // ... more code above<br> ",choices:["1. `grades.count();`","2. `my_array->count();`","3. `grades->count();`","4. `my_array.count();`"],answer:"3. `grades->count();`"},{id:54,title:"# Q53. What would be the output of this code?",text:void 0,code2:"```cpp<br> int i0=4, i1=6, i2=8;<br> int& nums[3]={i2,i0,i1};<br> std::cout<<nums[0]<<nums[1]<<nums[2];<br> ",choices:["1. There is no output. The code causes a compiler error because `nums` is an array of references, which is illegal.","2. 846","3. The output is the addresses of `i2`, `i0`, and `i1`, in that order, with no spaces.","4. 468"],answer:"1. There is no output. The code causes a compiler error because `nums` is an array of references, which is illegal."},{id:55,title:"# Q54. Does this code cause a compiler error? If so, why, and if not, what is `child_t`?",text:void 0,code2:"```cpp<br> typedef struct{<br>     unsigned int  age    : 4;<br>     unsigned char gender : 1;<br>     char                 : 0;<br>     unsigned int  size   : 2;<br> }child_t;<br> ",choices:["1. Yes, it causes a compiler error because the colon character is not allowed in struct definitions.","2. No, and `child_t` is a type defined as a structure with bit fields. It has 4 bits for age and 1 bit for gender in the first byte, and 2 bits for size in the second byte.","3. Yes, it causes a compiler error because there is an unnamed field.","4. Yes, it causes a compiler error because one field is defined as having a size of 0."],answer:"2. No, and `child_t` is a type defined as a structure with bit fields. It has 4 bits for age and 1 bit for gender in the first byte, and 2 bits for size in the second byte."},{id:56,title:"# Q55. What is this expression equivalent to?",text:void 0,code2:"```cpp<br> A->B<br> ",choices:["1. `*(A.B)`","2. `B=A`","3. `(*A).B`","4. `&A.B`"],answer:"3. `(*A).B`"},{id:57,title:"# Q56. What is this expression equivalent to?",text:void 0,code2:"```cpp<br> A->B->C->D<br> ",choices:["1. `A.B.C.D`","2. `*A.*B.*C.*D`","3. `&A.&B.&C.&D`","4. `*(*((*A).B).C).D`"],answer:"4. `*(*((*A).B).C).D`"},{id:58,title:"# Q57. What does this function do?",text:void 0,code2:"```cpp<br> auto buff = new char[50];<br> std::memset(buff,20,50);<br> ",choices:["1. It declares a memory buffer named buff that starts at address 20 and ends at address 70.","2. It sets all bits in the array named buffer from its element at index 20 to its element at index 50.","3. It writes the value 20 in every memory address from buff to buff+49.","4. It declares a memory buffer named buff that starts at address 20 and ends at address 50."],answer:"3. It writes the value 20 in every memory address from buff to buff+49."},{id:59,title:"# Q58. Consider a class named `CustomData`. Which choice is a correct declaration syntax to overload the postfix `++` operator as a class member?",text:void 0,code2:"  ",choices:["1. `CustomData& operator++();`","2. `void operator++(CustomData);`","3. `CustomData operator++(CustomData);`","4. `CustomData operator++(int);`"],answer:"4. `CustomData operator++(int);`"},{id:60,title:"# Q59. You want to sort my_array, declared below. Which choice is the correct call to std::sort, using a lambda expression as the comparison function?",text:void 0,code2:"```cpp<br> std::array<uint32_t, 50> my_array;<br> ```cpp<br> std::sort(my_array.begin(), my_array.end(),<br>     [](uint32_t a, uint32_t b) {<br>         return a < b;<br>     })<br> ```cpp<br> lambda(uint32_t a, uint32_t b){<br>     return a < b;<br> }<br> std::sort(my_array.begin(), my_array.end(), lambda);<br> ```cpp<br> std::sort(my_array.begin(), my_array.end(),<br>     lambda(uint32_t a, uint32_t b){<br>         return a < b;<br>     })<br> ```cpp<br> lambda(uint32_t a, uint32_t b){<br>     return a < b;<br> }<br> std::sort(my_array.begin(), my_array.end(), &lambda);<br> ",choices:["1. A","2. B","3. C","4. D"],answer:"1. A"},{id:61,title:"# Q60. Which choice is the most reasonable implementation of the function std::mutex::lock() by using std::mutex::try_lock()?",text:void 0,code2:"```cpp<br> void std::mutex::lock(){<br>     while(!this->try_lock());<br> }<br> ```cpp<br> void std::mutex::lock(){<br>     return (this->try_lock());<br> }<br> ```cpp<br> void std::mutex::lock(){<br>     while(1)<br>         this->try_lock();<br> }<br> ```cpp<br> void std::mutex::lock(){<br>     while(this->try_lock());<br> }<br> ",choices:["1. A","2. B","3. C","4. D"],answer:"1. A"},{id:63,title:"# Q62. What is the purpose of a destructor?",text:void 0,code2:"  ",choices:["1. It allows the programmer to write the necessary code to free the resources acquired by the object prior to deleting the object itself.","2. It deletes an object. One example of a destructor is the `delete()` function.","3. It terminates a program. This may be achieved as a regular function call or as an exception.","4. There are no destructors in C++."],answer:"1. It allows the programmer to write the necessary code to free the resources acquired by the object prior to deleting the object itself."},{id:64,title:"# Q63. What is one benefit of declaring the parameter as a `const` reference instead of declaring it as a regular object?",text:void 0,code2:"```cpp<br> int calculateMedian(const my_array& a)<br> ",choices:["1. Actually, objects cannot be passed as regular variables, because they require a constructor call. Therefore, a `const` reference is the only way to pass class instances to functions.","2. There are no benefits because a reference and an object are treated as the same thing.","3. The `const` qualifier forbids the code to modify the argument, so the programmer can rest assured that the source object will remain unchanged. / Alt.: The argument is passed as a reference, so if the passed my_array object is large, the program will require less time and memory.","4. The argument is passed as a reference, so the function receives a copy that can be modified without affecting the original variable."],answer:"3. The `const` qualifier forbids the code to modify the argument, so the programmer can rest assured that the source object will remain unchanged. / Alt.: The argument is passed as a reference, so if the passed my_array object is large, the program will require less time and memory."},{id:65,title:"# Q64. What is an include guard?",text:void 0,code2:"  ",choices:["1. a preprocessor directive that prevents inconsistent behaviors in lines that contain the #ifdef, #ifndef, or #elif directives","2. a compiler option that prevents the user code from including additional libraries","3. a preprocessor statement that prevents a source file from being included more than once in a project","4. a library that adds safety features such as mutexes, watchdog timers, and assertions to the project"],answer:"3. a preprocessor statement that prevents a source file from being included more than once in a project"},{id:66,title:"# Q65. What would be the correct declaration of a default constructor for a class named Sprite?",text:void 0,code2:"  ",choices:["1. A","2. B","3. C","4. D"],answer:"1. A"},{id:67,title:"# Q66. What is the purpose of this line in a header file?",text:void 0,code2:"```cpp<br> #pragma once<br> ",choices:["1. to restrict the use of its contents to only one source file","2. to tell the compiler that only one variable can be instantiated from the classes or types contained in this header file","3. to help the compiler finish faster by assuring that only one compiler pass is necessary for the code included in this header file","4. to make the compiler parse that header file only once, even if it is included multiple times in the source"],answer:"4. to make the compiler parse that header file only once, even if it is included multiple times in the source"},{id:68,title:"# Q67. What is a variable of type double?",text:void 0,code2:"  ",choices:["1. a 2-tuple","2. an integer number","3. a floating point number","4. a string with more than 255 characters"],answer:"3. a floating point number"},{id:69,title:"# Q68. Other than shifting bits to the left, what is the << operator used for?",text:void 0,code2:"  ",choices:["1. shifting characters to the left in a string.","2. inserting characters into an output stream like std::cout.","3. comparing floating point numbers as less-than.","4. assigning a variable to a reference."],answer:"2. inserting characters into an output stream like std::cout."},{id:70,title:"# Q69. Which choice is a reason to specify the type of a pointer instead of using `void *`, which works as a pointer to any type?",text:void 0,code2:"  ",choices:["1. The compiler needs the data type to make sure that the pointer is not going to be used on illegal non-pointable types such as functions, labels, pointers, and references.","2. `void *` does not work for any type. The language does not allow assigning anything other than `void` to a pointer to `void *`.","3. The compiler needs the data type to know how much memory to allocate for the pointer because different data types require different pointer lengths.","4. Yes, it causes a compiler error because one field is defined as having a size of 0."],answer:"3. The compiler needs the data type to know how much memory to allocate for the pointer because different data types require different pointer lengths."},{id:71,title:"# Q70. What is wrong with this piece of code?",text:void 0,code2:'```cpp<br> #include <iostream><br> char str[20];<br> int main(){<br>     std::cout << "What\'s your name? ";<br>     str << std::cin<br>     std::cout << "Hello, " << str;<br>     return 0;<br> }<br> ',choices:["1. The main function is supposed to have a void return type.","2. `std::cin` and `std::cout` are invalid. The correct names for the character input and output streams are `cin` and `cout`.","3. The address of `str` is supposed to be used. That is `&str` instead of `str`.","4. The input operator flow is inverted. it should start from `std::cin` and then flow (>>) into `str`."],answer:"4. The input operator flow is inverted. it should start from `std::cin` and then flow (>>) into `str`."},{id:72,title:"# Q71. When placed in a valid execution context, which statement will dynamically allocate memory from the heap for an integer of value 11?",text:void 0,code2:"  ",choices:["1. `int anInt = new int(11);`","2. `int* anInt = new int[11];`","3. `int anInt = new int[11];`","4. `int* anInt = new int(11);`"],answer:"4. `int* anInt = new int(11);`"},{id:73,title:"# Q72. Which choice best describes the type `long`?",text:void 0,code2:"  ",choices:["1. an integer number of at least 32 bits","2. a string with more than 255 characters","3. a pointer","4. a 64-bit floating point number"],answer:"1. an integer number of at least 32 bits"},{id:74,title:"# Q73. Which of the following types has the closest functionality to a class?",text:void 0,code2:"  ",choices:["1. `struct`","2. `union`","3. `enum`","4. `namespace`"],answer:"1. `struct`"},{id:75,title:'# Q74. Given these records in a map, how will you update the value for the key "Sinead" to 22?',text:void 0,code2:"  ",choices:['1. `marks["Sinead"] = 22`','2. `marks["Sinead"].22`','3. `marks["Sinead"] -> 22`','4. `marks["Sinead"].value = 22`'],answer:'1. `marks["Sinead"] = 22`'},{id:76,title:"# Q75. Why can the std::sort receive a function object as one of its parameters?",text:void 0,code2:"  ",choices:["1. `The std::sort function is a template. The programmer is free to enter the sorting algorithm in a function object as an argument.`","2. `Actually, std::sort takes only one argument, which is the container to be sorted.`","3. `std::sort operates on a template container. The compiler does not know how to relationally compare the values it contains, so a function must be provided to do the comparison.`","4. `std::sort will use the parameter function as an error handler. The function will be called if an error occurs.`"],answer:"1. `The std::sort function is a template. The programmer is free to enter the sorting algorithm in a function object as an argument.`"},{id:77,title:"# Q76. What will happen when you execute this code snippet?",text:void 0,code2:`\`\`\`cpp
#include <iostream>

int main() {
float a = 5.51;
int b = static_cast<int>(a);
std::cout << b;
}
\`\`\``,choices:["1. `6 will be printed on standard output, with no compilation warnings generated.`","2. `5 will be printed on standard output, with no compilation warnings generated.`","3. `6 will be printed on standard output, with compilation warnings generated.`","4. `5 will be printed on standard output, with compilation warnings generated.`"],answer:"2. `5 will be printed on standard output, with no compilation warnings generated.`"},{id:78,title:"# Q77. Which access specifier does not allow class members to be accessed from outside the class, but allows them to be accessed by derived classes?",text:void 0,code2:"  ",choices:["1. guarded","2. protected","3. public","4. private"],answer:"2. protected"},{id:79,title:"# Q78. The default executable generation on UNIX for a C++ program is \\_",text:void 0,code2:"  ",choices:["1. a.exe","2. a","3. a.out","4. out.a"],answer:"3. a.out"},{id:80,title:"# Q79. What will be the output of the following program?",text:void 0,code2:"```cpp<br> #include <iostream><br> using namespace std;<br> int main() {<br>   int a=1;<br>   cout<<(a++)*(++a)<<endl;<br>   return 0;<br> }<br> ",choices:["1. 1","2. 2","3. 3","4. 6"],answer:"3. 3"},{id:81,title:'# Q80. What does "c" stand for in cout and cin?',text:void 0,code2:"  ",choices:["1. compiler","2. console","3. character","4. standard namespace"],answer:"3. character"},{id:82,title:"# Q81. What is the use of tellp()?",text:void 0,code2:"  ",choices:["1. Current Input Pointer position","2. Current Output Pointer position","3. Last Input Pointer position","4. Last Output Pointer position"],answer:"2. Current Output Pointer position"},{id:83,title:"# Q82. What is callback function?",text:void 0,code2:"  ",choices:["1. Pointer for a pointer","2. Pointer for a function","3. function for a pointer","4. function for a class"],answer:"2. Pointer for a function"},{id:84,title:'# Q83. What is the correct syntax to output "Hello World" in C++?',text:void 0,code2:"  ",choices:['1. `cout << "Hello World";`','2. `System.out.println("Hello World");`','3. `print("Hello World");`','4. Console.WriteLine("Hello World");```'],answer:'1. `cout << "Hello World";`'},{id:85,title:"# Q84. How many categories of iterators are there in C++?",text:void 0,code2:"  ",choices:["1. 4","2. 3","3. 7","4. 5"],answer:"4. 5"},{id:86,title:"# Q85. What is the meaning of base class in C++ ?",text:void 0,code2:"  ",choices:["1. It inherits other class","2. It has a pointer variable","3. It is the first class declared","4. Another class got inherited from this class"],answer:"4. Another class got inherited from this class"},{id:87,title:"# Q86. The size of C++ objects is expressed in terms of multiples of the size of a ** and the size of a char is **.",text:void 0,code2:"  ",choices:["1. char, 4","2. float, 8","3. int, 1","4. char, 1"],answer:"4. char, 1"},{id:88,title:"# Q87. Implementation-dependent aspects about an implementation can be found in",text:void 0,code2:"  ",choices:["1. `<numeric>`","2. `<limit>`","3. `<limits>`","4. `<implementation>`"],answer:"3. `<limits>`"},{id:89,title:"# Q88. What is a default constructor?",text:void 0,code2:"  ",choices:["1. a constructor that can be used with no arguments","2. a constructor that does not have a return value","3. a constructor that is used by multiple classes","4. a constructor that initializes all members of a class"],answer:"1. a constructor that can be used with no arguments"},{id:90,title:"# Q89. When protecting a header file, why would you use '#pragma once' instead of 'include' guard?",text:void 0,code2:"  ",choices:["1. There is no reason to choose because they serve different purposes","2. An include guard uses a macro to achieve single inclusion, but the compiler cannot prevent the programmer from defining that macro elsewhere, which would result in no inclusion at all","3. '#pragma once' guarantees that the header code will never be changed because it is enforced by the compiler","4. Include guards refer to the header file in the file system, not to the code, so they are not helpful if the header file exists"],answer:"2. An include guard uses a macro to achieve single inclusion, but the compiler cannot prevent the programmer from defining that macro elsewhere, which would result in no inclusion at all"},{id:92,title:"# Q91. Which of the following is/are automatically added to every class, if we do not write our own?",text:void 0,code2:"  ",choices:["1. Copy Constructor","2. Assignment Operator","3. A constructor without any parameter","4. All of the above"],answer:"4. All of the above"},{id:93,title:"# Q92. The if-else statement can be replaced by which operator?",text:void 0,code2:"  ",choices:["1. certain structure","2. choosing structure","3. selective structure","4. None of the Above"],answer:"3. selective structure"},{id:94,title:"# Q93. Which choice would be a recursive solution to the factorial n! problem?",text:void 0,code2:"```cpp<br> void fact(int n) {<br>     if (n <= 0)<br>         return 0;<br>     else<br>         return 1;<br> }<br> ```cpp<br> int fact(int n) {<br>     if (n <= 0)<br>         return 1;<br>     else<br>         return (fact(n) * (n-1));<br> }<br> ```cpp<br> int fact(int n) {<br>     if (n >= 0)<br>         return 1;<br>     else<br>         return (fact(n-1) * n);<br> }<br> ```cpp<br> int fact(int n) {<br>     if (n <= 0)<br>         return 1;<br>     else<br>         return (fact(n-1) * n);<br> }<br> ",choices:["1. &shy;","2. &shy;","3. &shy;","4. &shy;"],answer:"4. &shy;"},{id:95,title:"# Q94. A class destructor can be called when a variety of situations occur. Which choice is not one of those situations?",text:void 0,code2:"  ",choices:["1. The program is terminated. This calls the destructor of static duration objects.","2. The delete () function is called for an object pointer assigned with the new operator.","3. The garbage collector detects that an object is no longer going to be used.","4. An automatic storage duration object goes out of scope."],answer:"3. The garbage collector detects that an object is no longer going to be used."},{id:96,title:"# Q95. You are designing a foreign exchange payments system in C++, You need to model a transaction of a currency that has an integer as its quantity and a float as its price. You then want to declare an actual object of this type. How will you achieve this?",text:void 0,code2:"```cpp<br> struct currencyDeal {<br>     float price;<br>     int quantity;<br> };<br> <br> currencyDeal firstDeal;<br> ```cpp<br> union currencyDeal {<br>     float price;<br>     int quantity;<br> };<br> <br> currencyDeal firstDeal;<br> ```cpp<br> struct currencyDeal {<br>     float price;<br>     int quantity;<br> };<br> ```cpp<br> union currencyDeal {<br>     float price;<br>     int quantity;<br> };<br> ",choices:["1. A","2. B","3. C","4. D"],answer:"1. A"},{id:97,title:'# Q96. What will happen if you attempt to call this function with checkConcatThreshold("a");?',text:void 0,code2:"```cpp<br> int checkConcatThreshold(string a, string b) {<br>     return (a + b).length () > 120;<br> }<br> ",choices:["1. A compilation warning will occur and the second argument will be given a default value of b.","2. A compilation warning will occur and the second argument will be given a default value of the empty string.","3. A compilation error will occur.","4. No compilation errors will occur and no compilation warnings will occur."],answer:"3. A compilation error will occur."},{id:98,title:"# Q97. You need to define a C++ lambda function. You want the function to have access to only the variables that are local to it. The function should receive a single parameter, and a name, and construct a simple greeting. How will you achieve this?",text:void 0,code2:'```cpp<br> auto myVeryFirstLambda = [=] (string name) {<br>         return "Hello " + name + "!";<br>     };<br> ```cpp<br> myVeryFirstLambda = [&] (string name) {<br>         return "Hello " + name + "!";<br>     };<br> ```cpp<br> auto myVeryFirstLambda = [] (string name) {<br>         return "Hello " + name + "!";<br>     };<br> ```cpp<br> myVeryFirstLambda = [] (string name) {<br>         return "Hello " + name + "!";<br>     };<br> ',choices:["1. A","2. B","3. C","4. D"],answer:"3. C"},{id:99,title:"# Q98. What is the value of X after running this code?",text:void 0,code2:"```cpp<br> int x=10, a=-3;<br> X+=a;<br> ",choices:["1. -3","2. 7","3. 13","4. 3"],answer:"2. 7"},{id:101,title:"# Q100. Which choice is not a C++ keyword?",text:void 0,code2:"  ",choices:["1. static_assert","2. reinterpret_cast","3. comPl","4. alignas"],answer:"3. comPl"},{id:102,title:"# Q101. The size_in_bits function seems to take any type of parameter. This can be done by overloading the function, or by letting the compiler take care of it by writing a template. Which choice is an implementation of that template?",text:void 0,code2:"```cpp<br> int main()<br> {<br> cout « size_in_bits(21) « endl;<br> cout « size_in_bits('f') « endl;<br> cout « size_in_bits(32.1f) « endl;<br> cout « size_in_bits(32.1) « endl;<br> return 0;<br> }<br> ```cpp<br> template <typename T><br> size_t size_in_bits(const T& a){<br> return sizeof(a)*8;<br> }<br> ```cpp<br> template size_t size_in_bits(const {int,float,double,char,long}& a){<br> return sizeof(a)*8;<br> }<br> ```cpp<br> template <typename T {int,float,double,char,long><br> size_t size_in_bits(const T& a){<br> return sizeof(a)*8;<br> }<br> ```cpp<br> size_t size_in_bits(void * a){<br> return sizeof(a)*8;<br> }<br> ",choices:["1. A","2. B","3. C","4. D"],answer:"3. C"},{id:103,title:"# Q102. To use the keyboard as input the iostream library is included. To read input from files as input what library is needed?",text:void 0,code2:"  ",choices:["1. fstream","2. cstdlib","3. filestream","4. iostream"],answer:"1. fstream"},{id:104,title:"# Q103. What will this object-oriented program print?",text:void 0,code2:'```cpp<br> #include <iostream><br> #include <string><br> using namespace std;<br> <br> class Vehicle {<br> public:<br> 	string fuel = "none";<br> };<br> <br> class MotorizedVehicle : public Vehicle {<br> public:<br> 	string fuel = "fossil";<br> };<br> <br> class NextgenMotorizedVehicle : public MotorizedVehicle {<br> public:<br> 	string fuel = "hydrogen";<br> };<br> <br> int main() {<br> 	MotorizedVehicle aCar;<br> 	cout << aCar.fuel;<br> 	return 0;<br> }<br> ',choices:["1. fossil","2. fossil none","3. hydrogen","4. none"],answer:"1. fossil"},{id:105,title:"# Q104. The program below is handling a stack container. What is the output of running the program?",text:void 0,code2:"```cpp<br> #include <iostream><br> #include <stack><br> <br> int main()<br> {<br> 	std::stack<int> stack;<br> 	stack.push(1);<br> 	stack.push(2);<br> 	stack.push(3);<br> <br> 	stack.pop();<br> <br> 	stack.push(4);<br> <br> 	stack.top();<br> 	stack.pop();<br> <br> 	std::cout << stack.top();<br> }<br> ",choices:["1. 1","2. 2","3. 3","4. 4"],answer:"2. 2"},{id:106,title:"# Q105. Which choice is a valid way to overload the ternary conditional operator?",text:void 0,code2:"  ",choices:["1. `void& operator ?:(const bool cond, const void& iftrue, const void& iffalse);`","2. `The ternary operator is not overloadable.`","3. `void& operator conditional(const bool cond, const void& iftrue, const void& iffalse);`","4. `void* operator ?:(const bool cond, const void* iftrue, const void* iffalse);`"],answer:"2. `The ternary operator is not overloadable.`"},{id:108,title:"# Q107. Which of the following is the correct syntax to print the message in C++ language?",text:void 0,code2:"  ",choices:['1. Out <<"Hello world!',"2. Cout << Hello world! ;",'3. cout <<"Hello world!";',"4. None of the above"],answer:'3. cout <<"Hello world!";'},{id:109,title:"# Q108. Consider the following program. What will be the output/error?",text:void 0,code2:'```cpp<br> #include<iostream><br> #include<algorithm><br> #include<string.h><br> using namespace std;<br> bool compare(char c1, char c2){<br> return tolower(c1) > tolower(c2);    //LINE-1<br> }<br> int main(){<br> char arr1[20] = "C++ Program", arr2[20] = "C Program";<br> cout << lexicographical_compare(arr1, arr1+strlen(arr1), arr2, arr2+strlen(arr2),<br> compare);<br> return 0;<br> }<br> ',choices:["1. 1","2. 0","3. -1","4. Compilation Error: function is not defined"],answer:"1. 1"},{id:110,title:'# Q109. Consider the following code segment. Fill in the blank at LINE-1 so that the program will print "not found"?',text:void 0,code2:'```cpp<br> #include <iostream><br> #include <algorithm><br> using namespace std;<br> int main() {<br> int data[] = {1,2,3,4,5};<br> int key = 5;<br> if(binary_search(__________))    //LINE-1<br> cout << "found";<br> else<br> cout << "not found";<br> return 0;<br> }<br> ',choices:["1. &data[0], &data[5], key","2. data, data+5, key","3. &data[0], &data[4], key","4. data+1, data+4, key"],answer:"4. data+1, data+4, key"},{id:111,title:"# Q110. Consider the following code segment. What will be the output?",text:void 0,code2:'```cpp<br> #include <iostream><br> #include <algorithm><br> using namespace std;<br> int main () {<br> int data[] = {50, 30, 40, 10, 20};<br> sort (&data[1], &data[4]);<br> for (int i = 0; i < 5; i++)<br> cout << data[i] << " ";<br> return 0;<br> }<br> ',choices:["1. 10 20 30 40 50","2. 10 30 40 50 20","3. 50 10 30 40 20","4. 50 10 20 30 40"],answer:"3. 50 10 30 40 20"},{id:112,title:"# Q111. Consider the following code segment. What will be the output?",text:void 0,code2:'```cpp<br> #include <iostream><br> #include <algorithm><br> using namespace std;<br> int main() {<br> int element[5];<br> for(int i = 1; i <= 5; i++)<br> *(element + i - 1) = i * 5;<br> rotate(element, element + 4, element + 5);<br> rotate(element, element + 1, element + 4);<br> for (int i = 0; i < 5; ++i)<br> cout << element[i] << " ";<br> return 0;<br> }<br> ',choices:["1. 5 10 15 20 25","2. 5 10 15 25 20","3. 20 10 15 25 5","4. 25 5 10 15 20"],answer:"2. 5 10 15 25 20"},{id:113,title:"# Q112. Consider the following code segment. What will be the output?",text:void 0,code2:'```cpp<br> #include <iostream><br> #include <vector><br> using namespace std;<br> int main() {<br> const int size = 3, c = 65;<br> vector<char> vc(size, ’A’);<br> for (int i = 1; i <= 2; i++)<br> vc.push_back(65 + i);<br> vc.resize(10, 90);<br> vc.resize(8);<br> for (int i = 0; i < vc.size(); i++)<br> cout << vc[i] << " ";<br> return 0;<br> }<br> ',choices:["1. A A A B C Z Z Z","2. A A B B C Z Z Z","3. A A A B C Z Z","4. A A A B C Z Z Z Z"],answer:"1. A A A B C Z Z Z"},{id:114,title:"# Q113. Consider the following code segment. Choose the appropriate option to fill in the blank at LINE-1, such that the output of the code would be: a C++ Program.",text:void 0,code2:'```cpp<br> #include <iostream><br> #include <string><br> using namespace std;<br> int main(void) {<br> string s1 = "C++ ";<br> string s2 = "Program";<br> __________________;    //LINE-1<br> cout << s1;<br> return 0;<br> }<br> ',choices:["1. s1 += s2","2. strcat(s1, s2)","3. s1.append(s2)","4. s1.insert(s2)"],answer:"3. s1.append(s2)"},{id:115,title:"# Q114. Consider the following code segment. Fill in the blank at LINE-1 such that the output is 5 2 3 4 5",text:void 0,code2:'```cpp<br> #include <iostream><br> #include <algorithm><br> using namespace std;<br> int main() {<br> int data[] = { 1, 2, 3, 4, 5 };<br> for (int i = 0; i < 1; i++) {<br> int j = data[i];<br> replace(data, data + 5, j, *(_________________));    //LINE-1<br> }<br> for (int i = 0; i < 5; ++i)<br> cout << data[i] << " ";<br> return 0;<br> }<br> ',choices:["1. data + 4 - i","2. data + 5 - i","3. data + i - 4","4. data + i - 5"],answer:"1. data + 4 - i"},{id:116,title:"# Q115. Consider the following code segment. What will be the output?",text:void 0,code2:'```cpp<br> #include <iostream><br> #include <cstring><br> #include <stack><br> using namespace std;<br> int main(){<br> char str[10] = "123456789";<br> stack<char> s1, s2;<br> int i;<br> for(i = 0; i < strlen(str)/2; i++)<br> s1.push(str[i]);<br> for(i=i-1; i < strlen(str); i++)<br> s2.push(str[i]);<br> while (!s1.empty()) {<br> s2.push(s1.top()); s1.pop();<br> }<br> while (!s2.empty()) {<br> cout << s2.top(); s2.pop();<br> }<br> return 0;<br> }<br> ',choices:["1. 1234987654","2. 123498765","3. 1234897654","4. 123459876"],answer:"1. 1234987654"},{id:118,title:"# Q117. Consider the following program. What will be the output/error(s)?",text:void 0,code2:"```cpp<br> #include <iostream><br> using namespace std;<br> char add(char c1 = ’a’) { return c1; }<br> char add(char c1 = ’a’, char c2 = ’b’) { return c1 + c2 - ’a’;}<br> char add(char c1 = ’a’, int d1 = 100){ return c1 + d1 - ’a’; }<br> char add(char c1 = ’a’, char c2 = ’b’, char c3) { return c1 + c2 + c3 - ’a’; }<br> int main() {<br> char c = add(’o’, ’k’);<br> cout << c << endl;<br> return 0;<br> }<br> ",choices:["1. y","2. z",'3. Compilation Error: default argument missing for "char add(char, char, char)"','4. Compilation Error: call of overload "add(char, char)" is ambiguous'],answer:'4. Compilation Error: call of overload "add(char, char)" is ambiguous'},{id:119,title:"# Q118. Consider the following code segment. What will be the output?",text:void 0,code2:"```cpp<br> #include <iostream><br> using namespace std;<br> #define SQR(x) (x)*(x)<br> int main() {<br> int a=3;<br> cout << SQR(a++) << endl;<br> return 0;<br> }<br> ",choices:["1. 12","2. 25","3. 9","4. 16"],answer:"1. 12"},{id:120,title:"# Q119. Consider the following code segment. Which line/s will give you an error?",text:void 0,code2:"```cpp<br> #include<iostream><br> #define X 1<br> using namespace std;<br> int main(){<br> int i;<br> const int i1 = 2;<br> const int i2 = i1; //LINE-1<br> i2 = X;<br> i = i1;<br> i1 = i;<br> return 0;<br> //LINE-2<br> //LINE-3<br> //LINE-4<br> }<br> ",choices:["1. LINE-1","2. LINE-2","3. LINE-3","4. LINE-4"],answer:"4. LINE-4"},{id:121,title:"# Q120. Consider the following code segment. What will be the output/error?",text:void 0,code2:'```cpp<br> #include<iostream><br> using namespace std;<br> int main(){<br> int a = 5;<br> int &b = a+1;<br> a = a*b;<br> cout << a << " " << b;<br> return 0;<br> }<br> ',choices:["1. 36","2. 30","3. 25","4. Compilation Error: invalid initialization of non-const reference"],answer:"4. Compilation Error: invalid initialization of non-const reference"},{id:122,title:"# Q121. Consider the following code segment. What will be the output?",text:void 0,code2:'```cpp<br> #include <iostream><br> using namespace std;<br> int& func(int& i) {     //LINE-1<br> return i = i+5;<br> }<br> int main() {<br> int x = 1, y = 2;<br> int& z = func(x);<br> cout << x << " " << z << " ";<br> func(x) = y;<br> cout << x << " " << z;<br> return 0;<br> }<br> ',choices:["1. 6 6 2 2","2. 6 6 7 7","3. 1 1 2 2","4. 1 1 7 7"],answer:"1. 6 6 2 2"},{id:123,title:"# Q122. Consider the following code segment. Choose the appropriate option to fill in the blanks at LINE-1, such that the output of the code would be: 300 20000.",text:void 0,code2:'```cpp<br> #include <iostream><br> using namespace std;<br> void compute(int n1, int n2, ________, ________){ //LINE-1<br> n3 = n1 + n2;<br> *n4 = n1 * n2;<br> }<br> int main(){<br> int a = 100, b = 200, c = 0, d = 0;<br> compute(a, b, c, &d); //LINE-2<br> cout << c << ", ";<br> cout << d;<br> return 0;<br> }<br> ',choices:["1. int n3, int\\* n4","2. int& n3, int \\*n4","3. int* n3, int* n4","4. int& n3, int& n4"],answer:"2. int& n3, int \\*n4"},{id:124,title:"# Q123. Consider the following code segment. What will be the output/error?",text:void 0,code2:"```cpp<br> #include <iostream><br> using namespace std;<br> int main() {<br> int a = 2, *b;<br> *b = 5;<br> int * const ptr;    // LINE-1<br> // LINE-2<br> ptr = b;<br> cout << *ptr;<br> return 0;<br> }<br> ",choices:["1. `<garbage value>`","2. 5","3. Compilation Error at LINE-1: uninitialized const ’ptr’","4. Compilation Error at LINE-2: assignment of read-only variable ’ptr’"],answer:"4. Compilation Error at LINE-2: assignment of read-only variable ’ptr’"},{id:126,title:"# Q125. Consider the following code segment. Fill in the blank at LINE-1 such that the program will print 5 + i3",text:void 0,code2:'```cpp<br> #include<iostream><br> using namespace std;<br> struct complex{<br> int re, im;<br> void show(){ cout << re << " + i" << im; }<br> };<br> ______________________________________{ //Line-1<br> c2.re = c1.re+c2.re;<br> c2.im = c1.im+c2.im;<br> return c2;<br> }<br> int main(){<br> struct complex c1={2,5},c2{3,-2};<br> struct complex t = c1 + c2;<br> t.show();<br> return 0;<br> }<br> ',choices:["1. complex operator+(complex &c1, complex &c2)","2. complex operator+(const complex &c1, const complex &c2)","3. operator+(complex &c1, complex &c2)","4. complex +(complex &c1, complex &c2)"],answer:"1. complex operator+(complex &c1, complex &c2)"},{id:127,title:"# Q126. Consider the following program. Which line/s will generate an error?",text:void 0,code2:"```cpp<br> #include<iostream><br> using namespace std;<br> class myClass{<br> int pra = 5;<br> public:<br> int pub = 10;<br> void set_pr(int x){ pra = x; }<br> void set_pu(int x){ pub = x; }<br> };<br> int main(){<br> myClass m;<br> int a, b;<br> a = m.pra; //LINE-1<br> b = m.pub; //LINE-2<br> m.set_pr(100); //LINE-3<br> m.set_pu(200); //LINE-4<br> return 0;<br> }<br> ",choices:["1. LINE-1","2. LINE-2","3. LINE-3","4. LINE-4"],answer:"1. LINE-1"},{id:128,title:"# Q127. Consider the following class. Fill in the blanks with proper access specifiers so that member y can be accessed from outside of the class but member x cannot be accessed.",text:void 0,code2:"```cpp<br> class Test{<br> ________:<br> int x;<br> ________:<br> int y;<br> /* Some more code */<br> };<br> ",choices:["1. public, public","2. public, private","3. private, public","4. private, private"],answer:"4. private, private"},{id:129,title:"# Q128. Which C++ Standard did add in-class default member initializers?",text:void 0,code2:"  ",choices:["1. C++98","2. C++11","3. C++14","4. C++17."],answer:"2. C++11"},{id:130,title:"# Q129. Can you use auto type deduction for non-static data members?",text:void 0,code2:"  ",choices:["1. Yes, since C++11","2. No","3. Yes, since C++20"],answer:"2. No"},{id:131,title:"# Q130. Do you need to define a static inline data member in a cpp file?",text:void 0,code2:"  ",choices:["1. No, the definition happens at the same place where a static inline member is declared.","2. Yes, the compiler needs the definition in a cpp file.","3. Yes, the compiler needs a definition in all translation units that use this variable."],answer:"1. No, the definition happens at the same place where a static inline member is declared."},{id:132,title:"# Q131. What's the output of the following code:",text:void 0,code2:'```cpp<br> struct S {<br>     int a { 10 };<br>     int b { 42 };<br> };<br> S s { 1 };<br> std::cout << s.a << ", " << s.b;<br> ',choices:["1. Output is: 1, 0","2. Output is: 10, 42","3. Output is: 1, 42"],answer:"3. Output is: 1, 42"},{id:134,title:"# Q133. Consider the following code:",text:void 0,code2:"```cpp<br> struct C {<br>     C(int x) : a(x) { }<br>     int a { 10 };<br>     int b { 42 };<br> };<br> C c(0);<br> <br> ",choices:["1. C::a is initialized twice. The first time, it's initialized with 10, and then the second time with 0 in the constructor.","2. C::a is initialized only once with 0 in the constructor.","3. The code doesn't compile because the compiler cannot decide how to initialize the C::a member.","4. 2 bytes"],answer:"2. C::a is initialized only once with 0 in the constructor."},{id:135,title:"# Q134. What happens when you throw an exception from a constructor?",text:void 0,code2:"  ",choices:['1. The object is considered "created" so it will follow the regular lifetime of an object.',`2. The object is considered "partially created," and thus, the compiler won't call its destructor.`,"3. he compiler calls std::terminate as you cannot throw exceptions from constructors."],answer:`2. The object is considered "partially created," and thus, the compiler won't call its destructor.`},{id:136,title:"# Q135. What happens when you compile this code?",text:void 0,code2:'```cpp<br> struct Point { int x; int y; };<br> Point pt {.y = 10, .x = 11 };<br> std::cout << pt.x << ", " << pt.y;<br> ',choices:["1. The code doesn't compile. Designators have to be in the same order as the data members in the Point class.","2. The code compiles and prints 11, 10.","3. The code compiles and prints 10, 11."],answer:"1. The code doesn't compile. Designators have to be in the same order as the data members in the Point class."},{id:137,title:"# Q136. Will this code work in C++11?",text:void 0,code2:'```cpp<br> struct User { std::string name = "unknown"; unsigned age { 0 }; };<br> User u { "John", 101 };<br> ',choices:["1. Yes, the code compiles in C++11 mode.","2. The code compiles starting with C++14 mode.","3. The code doesn't compile even in C++20."],answer:"2. The code compiles starting with C++14 mode."},{id:138,title:"# Q137. Assume you have a std::map<string, int> m;. Select the single true statement about the following loop:",text:void 0,code2:"```cpp<br> for (const pair<string, int>& elem : m)<br> ",choices:["1. A The loop properly iterates over the map, creating no extra copies.","2. B The loop will create a copy of each element in the map as the type of elem mismatches.","3. C The code won't compile as a const pair cannot bind to a map."],answer:"1. A The loop properly iterates over the map, creating no extra copies."},{id:140,title:"# Q139.Identify the incorrect constructor type.",text:void 0,code2:"```cpp<br> auto x = 4000.22;<br> ",choices:["1. Friend Constructor","2. Default Constructor","3. Parameterised Constructor","4. CopyConstructor"],answer:"1. Friend Constructor"},{id:141,title:"# Q140.Which of the following data types is supported in C++ but not in C?",text:void 0,code2:"  ",choices:["1. bool","2. int","3. double","4. float"],answer:"1. bool"},{id:142,title:"# Q141. Identify the correct syntax for declaring arrays in C++.",text:void 0,code2:"  ",choices:["1. int arr[10]","2. array arr[10]","3. array{10}","4. int arr"],answer:"1. int arr[10]"},{id:143,title:"# Q142.Size of wchat_t is.",text:void 0,code2:"  ",choices:["1. 2","2. 4","3. 2 or 4","4. Depends on the number of bits in the system"],answer:"4. Depends on the number of bits in the system"},{id:144,title:"# Q143.Which of the following loops is best when we know the number of iterations?",text:void 0,code2:"  ",choices:["1. while","2. for","3. do","4. All of the above"],answer:"2. for"},{id:146,title:"# Q145.Which of the following operators should be preferred to overload as a global function rather than a member method?",text:void 0,code2:"  ",choices:["1. Postfix ++","2. Comparison Operator","3. Insertion Operator <<","4. Prefix++"],answer:"2. Comparison Operator"},{id:148,title:"# Q147.What is the time complexity of the below code?",text:void 0,code2:'```cpp<br> for(int i=0;i<n;i++){<br>    for(int j=0;j<n;j++){<br>        cout<<"hello";<br>     }<br> }<br> ',choices:["1. O(n^3)","2. O(n^2)","3. O(n)","4. O(1)"],answer:"2. O(n^2)"},{id:149,title:"# Q148.What is the output of the code given below?",text:void 0,code2:"```cpp<br> int a=10;<br> int k=++a;<br> int m=a++;<br> cout<<k+m;<br> ",choices:["1. 20","2. 21","3. 22","4. 23"],answer:"3. 22"},{id:150,title:"# Q149. Which C++ construct is used for exception handling?",text:void 0,code2:"  ",choices:["1. try-catch","2. if-else","3. for loop","4. switch-case"],answer:"1. try-catch"},{id:152,title:"# Q151. In C++, what is the purpose of the `const` keyword when used with a variable?",text:void 0,code2:"  ",choices:["1. It makes the variable immutable","2. It changes the data type","3. It defines a constant function","4. It makes the variable a pointer"],answer:"1. It makes the variable immutable"},{id:153,title:"# Q152. Which is more effective while calling the C++ functions??",text:void 0,code2:"  ",choices:["1. Call by reference","2. Call by value","3. Call by pointer","4. Call by object"],answer:"1. Call by reference"},{id:154,title:"# Q153. What will be the output of the following C++ program?",text:void 0,code2:'```cpp<br> #include <iostream><br> using namespace std;<br> class A{<br> public:<br> 	A(){<br> 		cout<<"Constructor called<br> ";<br> 	   }<br> 	~A(){<br> 		cout<<"Destructor called<br> ";<br> 	    }<br> };<br> int main(int argc, char const *argv[])<br> {<br> 	A *a = new A[5];<br> 	delete[] a;<br> 	return 0;<br> }<br> ',choices:["1. Segmentation fault","2. “Constructor called” five times and then “Destructor called” five times","3. “Constructor called” five times and then “Destructor called” once","4. Error"],answer:"2. “Constructor called” five times and then “Destructor called” five times"},{id:155,title:"# Q.154 What is the output of this code?",text:void 0,code2:"  ",choices:["1. 1/2 = 0.499999","2. 1/2 = 0","3. 1/2 = 0.000000","4. 1/2 = 0.5"],answer:"3. 1/2 = 0.000000"},{id:156,title:"# Q.155 Which choice is _not_ related to declaring the member variable count as static in my_class?",text:void 0,code2:"```cpp<br> class my_class{<br>     public: static int count;<br> }<br> ",choices:["1. All objects that try to access their count member variable actually refer to the only class-bound static count variable.","2. The variable exists even when no objects of the class have been defined, so it can be modified at any point in the source code.","3. The variable cannot be modified by any part of the code in the same application or thread. However, other threads may modify it.","4. The variable is allocated only once, regardless of how many objects are instantiated, because it is bound to the class itself, not its instances."],answer:"3. The variable cannot be modified by any part of the code in the same application or thread. However, other threads may modify it."},{id:157,title:"# Q156. What is the purpose of the `constexpr` keyword in C++?",text:void 0,code2:"  ",choices:["1. It is used to define constants in C++.","2. `constexpr` is used to specify that a variable is a constant pointer.","3. `constexpr` is used to indicate that an expression can be evaluated at compile-time, making it suitable for use in constant expressions.","4. It is a keyword used to create asynchronous functions."],answer:"3. `constexpr` is used to indicate that an expression can be evaluated at compile-time, making it suitable for use in constant expressions."},{id:158,title:"# Q157. What is a template metaprogram in C++?",text:void 0,code2:"  ",choices:["1. A template metaprogram is a high-level programming language.","2. It refers to metaprogramming that uses templates in C++.","3. It's a type of user interface design pattern.","4. A template metaprogram is a compile-time computation, where templates and template specialization are used to perform computations at compile time."],answer:"4. A template metaprogram is a compile-time computation, where templates and template specialization are used to perform computations at compile time."},{id:159,title:"# Q158.Identify the correct example for a pre-increment operator.",text:void 0,code2:"  ",choices:["1. ++i","2. i++","3. --i","4. +i"],answer:"1. ++i"},{id:160,title:"# Q159. What will be the output of following code?",text:void 0,code2:"```cpp<br> {% raw %}<br> int matrix[3][3] = {{1, 2, 3},{4, 5, 6},{7, 8, 9}};<br> for(int i=0;i<3;i++){<br>     for(int j=0;j<3;j++){<br>         int a = mat[i][j];<br>         mat[i][j] = mat[j][i];<br>         mat[j][i] = a;<br>     }<br> }<br> {% endraw %}<br> ",choices:["1. Traspose of matrix","2. Same matrix","3. Mirror image of Matrix","4. Inverted matrix"],answer:"2. Same matrix"}],o=[{id:1,title:"# Q1. Which data structure is used to implement a stack?",text:void 0,code2:"  ",choices:["1. Linked List","2. Array","3. Both Linked List and Array","4. Tree"],answer:"3. Both Linked List and Array"},{id:2,title:"# Q2. Which data structure is used to implement a queue?",text:void 0,code2:"  ",choices:["1. Linked List","2. Array","3. Both Linked List and Array","4. Graph"],answer:"3. Both Linked List and Array"},{id:3,title:"# Q3. What is the time complexity of searching an element in a sorted array using binary search?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(log n)","3. O(n log n)","4. O(1)"],answer:"2. O(log n)"},{id:4,title:"# Q4. What is the time complexity of inserting an element at the beginning of a linked list?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"2. O(1)"},{id:5,title:"# Q5. What is the time complexity of deleting an element from the end of a linked list?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"1. O(n)"},{id:6,title:"# Q6. What is the time complexity of inserting an element at the end of a queue implemented using an array?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"1. O(n)"},{id:7,title:"# Q7. What is the time complexity of deleting an element from the front of a queue implemented using an array?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"2. O(1)"},{id:8,title:"# Q8. What is the time complexity of inserting an element at the beginning of a stack implemented using a linked list?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"2. O(1)"},{id:9,title:"# Q9. What is the time complexity of deleting an element from the top of a stack implemented using a linked list?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"2. O(1)"},{id:10,title:"# Q10. What is the time complexity of finding the minimum element in a min-heap?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"2. O(1)"},{id:11,title:"# Q11. What is the time complexity of inserting an element into a min-heap?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"3. O(log n)"},{id:12,title:"# Q12. What is the time complexity of deleting an element from a min-heap?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"3. O(log n)"},{id:14,title:"# Q14. What is the time complexity of inserting an element into a binary search tree?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"3. O(log n)"},{id:15,title:"# Q15. What is the time complexity of deleting an element from a binary search tree?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"3. O(log n)"},{id:16,title:"# Q16. What is the time complexity of finding the maximum element in a binary search tree?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"1. O(n)"},{id:17,title:"# Q17. What is the time complexity of finding the minimum element in a binary search tree?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"1. O(n)"},{id:18,title:"# Q18. What is the time complexity of traversing a binary search tree in inorder?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"1. O(n)"},{id:20,title:"# Q20. What is the time complexity of traversing a binary search tree in postorder?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"1. O(n)"},{id:21,title:"# Q21. What is the time complexity of finding the depth of a binary tree?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"1. O(n)"},{id:22,title:"# Q22. What is the time complexity of finding the height of a binary tree?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"1. O(n)"},{id:23,title:"# Q23. What is the time complexity of finding the diameter of a binary tree?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"1. O(n)"},{id:24,title:"# Q24. What is the time complexity of finding the sum of all nodes in a binary tree?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"1. O(n)"},{id:25,title:"# Q25. What is the time complexity of finding the number of nodes in a binary tree?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"1. O(n)"},{id:26,title:"# Q26. What is the time complexity of finding the level of a node in a binary tree?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"1. O(n)"},{id:27,title:"# Q27. What is the time complexity of finding the least common ancestor (LCA) of two nodes in a binary tree?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"1. O(n)"},{id:28,title:"# Q28. What is the time complexity of checking if a binary tree is balanced?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"1. O(n)"},{id:29,title:"# Q29. What is the time complexity of checking if a binary tree is a binary search tree?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"1. O(n)"},{id:30,title:"# Q30. What is the time complexity of checking if a binary tree is a complete binary tree?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"1. O(n)"},{id:31,title:"# Q31. What is the time complexity of finding the maximum element in a heap?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"2. O(1)"},{id:32,title:"# Q32. What is the time complexity of finding the minimum element in a heap?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"2. O(1)"},{id:33,title:"# Q33. What is the time complexity of inserting an element into a heap?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"3. O(log n)"},{id:34,title:"# Q34. What is the time complexity of deleting an element from a heap?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"3. O(log n)"},{id:35,title:"# Q35. What is the time complexity of sorting an array using merge sort?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(n log n)","3. O(n^2)","4. O(n^3)"],answer:"2. O(n log n)"},{id:36,title:"# Q36. What is the time complexity of sorting an array using quick sort?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(n log n)","3. O(n^2)","4. O(n^3)"],answer:"2. O(n log n)"},{id:37,title:"# Q37. What is the time complexity of sorting an array using insertion sort?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(n log n)","3. O(n^2)","4. O(n^3)"],answer:"3. O(n^2)"},{id:38,title:"# Q38. What is the time complexity of sorting an array using bubble sort?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(n log n)","3. O(n^2)","4. O(n^3)"],answer:"3. O(n^2)"},{id:39,title:"# Q39. What is the time complexity of sorting an array using selection sort?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(n log n)","3. O(n^2)","4. O(n^3)"],answer:"3. O(n^2)"},{id:40,title:"# Q40. What is the time complexity of finding the kth smallest element in an unsorted array using the quick select algorithm?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(n log n)","3. O(n^2)","4. O(n^3)"],answer:"1. O(n)"},{id:41,title:"# Q41. What is the time complexity of finding the kth smallest element in a sorted array?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"2. O(1)"},{id:42,title:"# Q42. What is the time complexity of finding the median of an unsorted array?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(n log n)","3. O(n^2)","4. O(n^3)"],answer:"1. O(n)"},{id:43,title:"# Q43. What is the time complexity of finding the median of a sorted array?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"2. O(1)"},{id:44,title:"# Q44. What is the time complexity of finding the mode of an unsorted array?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(n log n)","3. O(n^2)","4. O(n^3)"],answer:"1. O(n)"},{id:45,title:"# Q45. What is the time complexity of finding the mode of a sorted array?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"1. O(n)"},{id:46,title:"# Q46. What is the time complexity of finding the range of an unsorted array?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"1. O(n)"},{id:47,title:"# Q47. What is the time complexity of finding the range of a sorted array?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"2. O(1)"},{id:48,title:"# Q48. What is the time complexity of finding the sum of all elements in an unsorted array?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"1. O(n)"},{id:49,title:"# Q49. What is the time complexity of finding the sum of all elements in a sorted array?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"1. O(n)"},{id:50,title:"# Q50. What is the time complexity of finding the average of all elements in an unsorted array?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"1. O(n)"},{id:51,title:"# Q51. Which of the following is NOT a valid data structure?",text:void 0,code2:"  ",choices:["1. Queue","2. Stack","3. Heap","4. Loop"],answer:"4. Loop"},{id:52,title:"# Q52. What is the primary difference between a stack and a queue?",text:void 0,code2:"  ",choices:["1. Stacks are LIFO, queues are FIFO.","2. Stacks are FIFO, queues are LIFO.","3. Stacks use arrays, queues use linked lists.","4. Stacks use linked lists, queues use arrays."],answer:"1. Stacks are LIFO, queues are FIFO."},{id:53,title:"# Q53. Which of the following is an advantage of using a linked list over an array?",text:void 0,code2:"  ",choices:["1. Faster insertion and deletion at arbitrary positions.","2. More efficient memory usage.","3. Easier to implement.","4. All of the above."],answer:"1. Faster insertion and deletion at arbitrary positions."},{id:54,title:"# Q54. What is the time complexity of accessing the kth element in an array?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"2. O(1)"},{id:55,title:"# Q55. Which of the following is NOT a sorting algorithm?",text:void 0,code2:"  ",choices:["1. Merge Sort","2. Quick Sort","3. Binary Search","4. Insertion Sort"],answer:"3. Binary Search"},{id:56,title:"# Q56. Which sorting algorithm is generally considered the most efficient for large datasets?",text:void 0,code2:"  ",choices:["1. Bubble Sort","2. Insertion Sort","3. Merge Sort","4. Selection Sort"],answer:"3. Merge Sort"},{id:57,title:"# Q57. What is the time complexity of the best-case scenario for Quick Sort?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(n log n)","3. O(n^2)","4. O(n^3)"],answer:"2. O(n log n)"},{id:51,title:"# Q51. Which of the following is NOT a valid data structure?",text:void 0,code2:"  ",choices:["1. Queue","2. Stack","3. Heap","4. Loop"],answer:"4. Loop",solution:"A loop is a control flow construct, not a data structure. Data structures are designed to organize and store data, while loops are used to repeat a block of code."},{id:52,title:"# Q52. What is the primary difference between a stack and a queue?",text:void 0,code2:"  ",choices:["1. Stacks are LIFO, queues are FIFO.","2. Stacks are FIFO, queues are LIFO.","3. Stacks use arrays, queues use linked lists.","4. Stacks use linked lists, queues use arrays."],answer:"1. Stacks are LIFO, queues are FIFO.",solution:"LIFO stands for Last-In, First-Out. In a stack, the last element added is the first one to be removed. FIFO stands for First-In, First-Out. In a queue, the first element added is the first one to be removed."},{id:53,title:"# Q53. Which of the following is an advantage of using a linked list over an array?",text:void 0,code2:"  ",choices:["1. Faster insertion and deletion at arbitrary positions.","2. More efficient memory usage.","3. Easier to implement.","4. All of the above."],answer:"1. Faster insertion and deletion at arbitrary positions.",solution:"In a linked list, elements are stored in nodes that point to each other. To insert or delete an element, you only need to change the pointers, which is a constant-time operation. In an array, you need to shift elements to make space for insertion or deletion, which takes linear time."},{id:54,title:"# Q54. What is the time complexity of accessing the kth element in an array?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"2. O(1)",solution:"Accessing an element in an array is done by directly indexing it, which takes constant time regardless of the size of the array."},{id:55,title:"# Q55. Which of the following is NOT a sorting algorithm?",text:void 0,code2:"  ",choices:["1. Merge Sort","2. Quick Sort","3. Binary Search","4. Insertion Sort"],answer:"3. Binary Search",solution:"Binary search is a search algorithm, not a sorting algorithm. It is used to efficiently find a specific element in a sorted array."},{id:56,title:"# Q56. Which sorting algorithm is generally considered the most efficient for large datasets?",text:void 0,code2:"  ",choices:["1. Bubble Sort","2. Insertion Sort","3. Merge Sort","4. Selection Sort"],answer:"3. Merge Sort",solution:"Merge sort has a time complexity of O(n log n) for all cases, making it a very efficient sorting algorithm for large datasets. While other algorithms like Quick Sort might be faster in some scenarios, Merge Sort's consistency and predictable performance make it the preferred choice for large data."},{id:57,title:"# Q57. What is the time complexity of the best-case scenario for Quick Sort?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(n log n)","3. O(n^2)","4. O(n^3)"],answer:"2. O(n log n)",solution:"Quick Sort's best-case scenario occurs when the pivot element selected in each partition step divides the array into roughly equal halves. In this case, the algorithm performs very efficiently with a time complexity of O(n log n)."},{id:58,title:"# Q58. What is the worst-case time complexity of Heap Sort?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(n log n)","3. O(n^2)","4. O(n^3)"],answer:"2. O(n log n)",solution:"Heap Sort consistently maintains a time complexity of O(n log n) for both best-case and worst-case scenarios. It's known for its stable performance, making it a reliable choice even for potentially challenging datasets."},{id:59,title:"# Q59. Which data structure is used in the implementation of a priority queue?",text:void 0,code2:"  ",choices:["1. Linked List","2. Array","3. Heap","4. Stack"],answer:"3. Heap",solution:"Heaps are typically used to implement priority queues because they allow for efficient insertion and deletion operations while maintaining the priority order of elements. Heaps ensure that the element with the highest (or lowest) priority is always at the root, making it easily accessible for retrieval."},{id:60,title:"# Q60. What is the time complexity of searching for an element in a hash table?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"2. O(1)",solution:"In an ideal hash table, the average time complexity for searching is O(1), meaning that it takes a constant amount of time to locate an element, regardless of the table size. This efficiency stems from the way elements are stored and accessed using hash functions."},{id:61,title:"# Q61. What is a hash function?",text:void 0,code2:"  ",choices:["1. A function that generates a unique key for each element.","2. A function that sorts elements in ascending order.","3. A function that searches for a specific element in a data structure.","4. A function that deletes an element from a data structure."],answer:"1. A function that generates a unique key for each element.",solution:"A hash function maps data of arbitrary size to a fixed-size value, known as a hash value. This hash value is used to store and retrieve elements in a hash table. Ideally, a good hash function should distribute the hash values evenly, minimizing collisions and improving search performance."},{id:62,title:"# Q62. What is a collision in a hash table?",text:void 0,code2:"  ",choices:["1. When two different elements map to the same hash value.","2. When a hash function fails to generate a unique key.","3. When the hash table is full and cannot store more elements.","4. When the hash function returns a negative hash value."],answer:"1. When two different elements map to the same hash value.",solution:"Collisions occur when two distinct elements produce the same hash value. This can happen even with well-designed hash functions, especially when dealing with a large number of elements. Collision resolution techniques like separate chaining or open addressing are used to handle such situations and avoid data loss or overwriting."},{id:63,title:"# Q63. What is a graph?",text:void 0,code2:"  ",choices:["1. A data structure that represents a hierarchical relationship between elements.","2. A data structure that represents a network of interconnected nodes.","3. A data structure that stores elements in a sorted order.","4. A data structure that stores elements in a LIFO manner."],answer:"2. A data structure that represents a network of interconnected nodes.",solution:"A graph consists of nodes (also known as vertices) and edges that connect these nodes. It's used to model relationships and connections between entities, making it suitable for representing networks, maps, social connections, dependencies, and various other real-world scenarios."},{id:64,title:"# Q64. What is a tree?",text:void 0,code2:"  ",choices:["1. A data structure that represents a network of interconnected nodes.","2. A data structure that represents a hierarchical relationship between elements.","3. A data structure that stores elements in a sorted order.","4. A data structure that stores elements in a LIFO manner."],answer:"2. A data structure that represents a hierarchical relationship between elements.",solution:"Trees are a hierarchical data structure where elements are organized in a parent-child relationship. The topmost node is called the root, and each node can have multiple child nodes. This structure allows for efficient traversal and search operations, making it suitable for applications like file systems, databases, and decision-making."},{id:65,title:"# Q65. What is the difference between a directed graph and an undirected graph?",text:void 0,code2:"  ",choices:["1. Directed graphs have edges with a specific direction, while undirected graphs do not.","2. Undirected graphs have edges with a specific direction, while directed graphs do not.","3. Directed graphs are used to represent hierarchies, while undirected graphs are used to represent networks.","4. Undirected graphs are used to represent hierarchies, while directed graphs are used to represent networks."],answer:"1. Directed graphs have edges with a specific direction, while undirected graphs do not.",solution:"In a directed graph, the edges represent one-way connections between nodes. For example, a road network with one-way streets can be modeled as a directed graph. In an undirected graph, edges represent two-way connections between nodes. For example, a social network where individuals can be friends with each other can be represented as an undirected graph."},{id:66,title:"# Q66. What is a binary tree?",text:void 0,code2:"  ",choices:["1. A tree where each node can have at most two child nodes.","2. A tree where each node can have at most one child node.","3. A tree where each node can have any number of child nodes.","4. A tree where each node is a binary number."],answer:"1. A tree where each node can have at most two child nodes.",solution:"A binary tree is a type of tree data structure where each node has a maximum of two child nodes, typically labeled as the left child and the right child. This structure allows for efficient organization and retrieval of data based on certain criteria, making it a popular choice for implementing search algorithms, sorting, and expression trees."},{id:67,title:"# Q67. What is a complete binary tree?",text:void 0,code2:"  ",choices:["1. A binary tree where all levels are completely filled except possibly the last level.","2. A binary tree where all levels are completely filled.","3. A binary tree where the left subtree is a complete binary tree and the right subtree is a complete binary tree.","4. A binary tree where all nodes have a maximum of two children."],answer:"1. A binary tree where all levels are completely filled except possibly the last level.",solution:"In a complete binary tree, all levels are completely filled with nodes, except possibly the last level. On the last level, all nodes are as far left as possible. This property makes complete binary trees particularly efficient for storing and retrieving elements, as they provide a compact and organized structure."},{id:68,title:"# Q68. What is a perfect binary tree?",text:void 0,code2:"  ",choices:["1. A binary tree where all levels are completely filled.","2. A binary tree where all levels are completely filled except possibly the last level.","3. A binary tree where the left subtree is a perfect binary tree and the right subtree is a perfect binary tree.","4. A binary tree where all nodes have a maximum of two children."],answer:"1. A binary tree where all levels are completely filled.",solution:"A perfect binary tree has all levels completely filled with nodes. It's a specific type of complete binary tree where every node, except for the leaves, has exactly two children. This structure provides maximum space utilization and efficiency for certain algorithms like heap sort."},{id:70,title:"# Q70. What is the purpose of a self-balancing binary search tree?",text:void 0,code2:"  ",choices:["1. To ensure that the tree is always balanced, even after insertions and deletions.","2. To improve the efficiency of search operations.","3. To prevent the tree from becoming too skewed.","4. All of the above."],answer:"4. All of the above.",solution:"Self-balancing binary search trees are designed to maintain a balanced structure even as elements are inserted or deleted. This balance ensures that the worst-case time complexity for search, insertion, and deletion operations remains O(log n), preventing the tree from degenerating into a linear structure and significantly slowing down operations."},{id:71,title:"# Q71. Which of the following is NOT a self-balancing binary search tree?",text:void 0,code2:"  ",choices:["1. AVL Tree","2. Red-Black Tree","3. B-Tree","4. Splay Tree"],answer:"3. B-Tree",solution:"B-Trees are a type of balanced tree, but they are not specifically designed for self-balancing in the context of binary search trees. They are primarily used for efficient storage and retrieval of data on disk, often found in databases."},{id:72,title:"# Q72. What is the purpose of a trie?",text:void 0,code2:"  ",choices:["1. To efficiently store and retrieve strings.","2. To sort elements in alphabetical order.","3. To search for a specific element in a data structure.","4. To delete an element from a data structure."],answer:"1. To efficiently store and retrieve strings.",solution:"Tries, also known as prefix trees, are specialized tree structures optimized for storing and searching strings. Each node in a trie represents a character, and the path from the root to a leaf node represents a complete string. Tries allow for efficient prefix-based searching, making them suitable for applications like autocomplete, spell checkers, and dictionary implementations."},{id:74,title:"# Q74. What is the time complexity of the union operation in a disjoint set data structure?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"3. O(log n)",solution:"The time complexity of the union operation in a disjoint set data structure is typically O(log n), where n is the number of elements in the sets being merged. This is achieved through efficient techniques like path compression and union by rank."},{id:75,title:"# Q75. What is the time complexity of the find operation in a disjoint set data structure?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"3. O(log n)",solution:"Similar to the union operation, the find operation in a disjoint set data structure typically has a time complexity of O(log n) using techniques like path compression and union by rank."},{id:76,title:"# Q76. Which data structure is used to represent a game tree in artificial intelligence?",text:void 0,code2:"  ",choices:["1. Stack","2. Queue","3. Heap","4. Tree"],answer:"4. Tree",solution:"Game trees are commonly used in artificial intelligence to represent the possible moves and outcomes in a game. Each node in the tree represents a game state, and the edges represent the possible moves that can be made from that state. This structure allows for algorithms like minimax and alpha-beta pruning to search for optimal moves in the game."},{id:77,title:"# Q77. What is the purpose of a breadth-first search (BFS) algorithm?",text:void 0,code2:"  ",choices:["1. To find the shortest path between two nodes in a graph.","2. To find the maximum element in a graph.","3. To sort elements in alphabetical order.","4. To delete an element from a graph."],answer:"1. To find the shortest path between two nodes in a graph.",solution:"BFS is a graph traversal algorithm that explores the graph level by level, starting from a source node. It is used to find the shortest path between two nodes in an unweighted graph or to determine if there is a path between two nodes. BFS is often used in applications like network routing, finding the shortest path in a maze, and discovering connected components in a graph."},{id:78,title:"# Q78. What is the purpose of a depth-first search (DFS) algorithm?",text:void 0,code2:"  ",choices:["1. To find the shortest path between two nodes in a graph.","2. To find all reachable nodes from a given source node.","3. To sort elements in alphabetical order.","4. To delete an element from a graph."],answer:"2. To find all reachable nodes from a given source node.",solution:"DFS is a graph traversal algorithm that explores the graph by going as deep as possible along each branch before backtracking. It is used to find all reachable nodes from a given source node, determine if a graph is cyclic, or find connected components in a graph. DFS is often used in applications like topological sorting, finding cycles in a graph, and solving puzzles like Sudoku."},{id:79,title:"# Q79. What is the time complexity of a breadth-first search (BFS) algorithm?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(V+E)","3. O(log n)","4. O(n log n)"],answer:"2. O(V+E)",solution:"The time complexity of BFS is O(V+E), where V is the number of vertices (nodes) and E is the number of edges in the graph. BFS visits each vertex once and explores each edge once, making its runtime proportional to the size of the graph."},{id:80,title:"# Q80. What is the time complexity of a depth-first search (DFS) algorithm?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(V+E)","3. O(log n)","4. O(n log n)"],answer:"2. O(V+E)",solution:"Similar to BFS, the time complexity of DFS is also O(V+E), where V is the number of vertices and E is the number of edges. DFS visits each vertex once and explores each edge once, making its runtime proportional to the size of the graph."},{id:81,title:"# Q81. What is Dijkstra's algorithm?",text:void 0,code2:"  ",choices:["1. A graph traversal algorithm.","2. A sorting algorithm.","3. An algorithm for finding the shortest path between two nodes in a weighted graph.","4. An algorithm for finding the minimum spanning tree of a graph."],answer:"3. An algorithm for finding the shortest path between two nodes in a weighted graph.",solution:"Dijkstra's algorithm is a greedy algorithm that finds the shortest path from a source node to all other nodes in a weighted graph. It works by iteratively selecting the node with the smallest distance from the source node and updating the distances of its neighboring nodes. Dijkstra's algorithm is widely used in applications like route planning, network routing, and finding the shortest paths in maps."},{id:82,title:"# Q82. What is the time complexity of Dijkstra's algorithm?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(V+E)","3. O(V log V)","4. O(n log n)"],answer:"3. O(V log V)",solution:"The time complexity of Dijkstra's algorithm is typically O(V log V), where V is the number of vertices in the graph. This is achieved using a priority queue to efficiently select the node with the smallest distance from the source node. The use of a priority queue allows for faster updates and retrieval of distances, leading to the overall complexity of O(V log V)."},{id:83,title:"# Q83. What is the purpose of Kruskal's algorithm?",text:void 0,code2:"  ",choices:["1. To find the shortest path between two nodes in a graph.","2. To find the minimum spanning tree of a graph.","3. To sort elements in alphabetical order.","4. To delete an element from a graph."],answer:"2. To find the minimum spanning tree of a graph.",solution:"Kruskal's algorithm is a greedy algorithm that finds the minimum spanning tree (MST) of a connected, undirected graph. It works by iteratively selecting the edge with the smallest weight that does not create a cycle in the MST. Kruskal's algorithm uses a disjoint set data structure to efficiently determine if adding an edge will create a cycle. It is often used in applications like network design, circuit design, and transportation networks."},{id:84,title:"# Q84. What is the time complexity of Kruskal's algorithm?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(V+E)","3. O(E log E)","4. O(n log n)"],answer:"3. O(E log E)",solution:"Kruskal's algorithm's time complexity is O(E log E), where E is the number of edges in the graph. This is due to sorting the edges in ascending order of weight (which takes O(E log E) time) and using a disjoint set data structure for the union-find operations, which takes O(E log E) time as well. The overall complexity is dominated by these two operations, resulting in an overall time complexity of O(E log E)."},{id:85,title:"# Q85. What is the purpose of Prim's algorithm?",text:void 0,code2:"  ",choices:["1. To find the shortest path between two nodes in a graph.","2. To find the minimum spanning tree of a graph.","3. To sort elements in alphabetical order.","4. To delete an element from a graph."],answer:"2. To find the minimum spanning tree of a graph.",solution:"Prim's algorithm is another greedy algorithm that finds the minimum spanning tree (MST) of a connected, undirected graph. It works by iteratively adding the edge with the smallest weight that connects a node in the MST to a node outside the MST. Prim's algorithm uses a priority queue to efficiently select the edge with the smallest weight. It is also widely used in applications like network design, circuit design, and transportation networks."},{id:86,title:"# Q86. What is the time complexity of Prim's algorithm?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(V+E)","3. O(E log E)","4. O(V log V)"],answer:"4. O(V log V)",solution:"The time complexity of Prim's algorithm is typically O(V log V), where V is the number of vertices in the graph. This is achieved using a priority queue to efficiently select the edge with the smallest weight. The use of a priority queue allows for faster updates and retrieval of edge weights, leading to the overall complexity of O(V log V)."},{id:87,title:"# Q87. What is the difference between Kruskal's algorithm and Prim's algorithm?",text:void 0,code2:"  ",choices:["1. Kruskal's algorithm uses a disjoint set data structure, while Prim's algorithm uses a priority queue.","2. Kruskal's algorithm starts with a single node and adds edges iteratively, while Prim's algorithm starts with a single edge and adds nodes iteratively.","3. Kruskal's algorithm has a time complexity of O(E log E), while Prim's algorithm has a time complexity of O(V log V).","4. All of the above."],answer:"4. All of the above.",solution:"While both Kruskal's algorithm and Prim's algorithm find the minimum spanning tree of a graph, they have different approaches"},{id:88,title:"# Q88. What is a topological sort?",text:void 0,code2:"  ",choices:["1. A sorting algorithm for directed graphs.","2. A graph traversal algorithm.","3. An algorithm for finding the shortest path between two nodes in a graph.","4. An algorithm for finding the minimum spanning tree of a graph."],answer:"1. A sorting algorithm for directed graphs.",solution:"Topological sort is a linear ordering of vertices in a directed acyclic graph (DAG) such that for every directed edge (u, v), vertex u comes before vertex v in the ordering. It is used in applications like task scheduling, dependency management, and resolving circular dependencies in code."},{id:89,title:"# Q89. What is the time complexity of a topological sort algorithm?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(V+E)","3. O(log n)","4. O(n log n)"],answer:"2. O(V+E)",solution:"The time complexity of a topological sort algorithm is typically O(V+E), where V is the number of vertices and E is the number of edges in the directed acyclic graph. This is because the algorithm visits each vertex and edge at most once, making its runtime proportional to the size of the graph."},{id:90,title:"# Q90. What is the purpose of a dynamic programming algorithm?",text:void 0,code2:"  ",choices:["1. To solve problems by breaking them down into smaller overlapping subproblems and storing the solutions to these subproblems.","2. To sort elements in alphabetical order.","3. To search for a specific element in a data structure.","4. To delete an element from a data structure."],answer:"1. To solve problems by breaking them down into smaller overlapping subproblems and storing the solutions to these subproblems.",solution:"Dynamic programming is a technique for solving problems by breaking them down into smaller overlapping subproblems and storing the solutions to these subproblems to avoid recomputing them. This approach helps to optimize the overall runtime of the algorithm by reusing previously calculated results. Dynamic programming is used in various applications like finding the shortest path in a graph, calculating Fibonacci numbers, and solving knapsack problems."},{id:91,title:"# Q91. Which of the following is NOT a dynamic programming problem?",text:void 0,code2:"  ",choices:["1. Fibonacci sequence","2. Knapsack problem","3. Traveling salesman problem","4. Merge Sort"],answer:"4. Merge Sort",solution:"Merge Sort is a divide-and-conquer algorithm, not a dynamic programming algorithm. It does not store or reuse previously calculated results like dynamic programming."},{id:92,title:"# Q92. Given a sorted array, return the index of the first occurrence of a target value.",text:void 0,code2:"```cpp<br>int firstOccurrence(vector<int>& nums, int target) {<br>  // Implement the logic here<br>}<br>```",choices:["1. `return -1;`","2. `return 0;`","3. `return nums.size() - 1;`","4. `return lower_bound(nums.begin(), nums.end(), target) - nums.begin();` "],answer:"4. `return lower_bound(nums.begin(), nums.end(), target) - nums.begin();` ",solution:"The `lower_bound` function in C++ returns an iterator to the first element in the range that is not less than the given value.  Subtracting the beginning iterator gives us the index of that element, which represents the first occurrence of the target value in the sorted array.  If the target value is not present in the array, `lower_bound` returns an iterator to the end of the array.  Since we're looking for the first occurrence, we subtract the beginning iterator, resulting in an index equal to the size of the array, which is effectively the same as returning -1."},{id:93,title:"# Q93. Reverse a linked list in-place.",text:void 0,code2:"```cpp<br>struct ListNode {<br>  int val;<br>  ListNode *next;<br>  ListNode() : val(0), next(nullptr) {}<br>  ListNode(int x) : val(x), next(nullptr) {}<br>  ListNode(int x, ListNode *next) : val(x), next(next) {}<br>};<br><br>ListNode* reverseList(ListNode* head) {<br>  // Implement the logic here<br>}<br>```",choices:["1. `return head;`","2. `return nullptr;`","3. `return head->next;`","4. `ListNode* prev = nullptr, *curr = head, *next = nullptr;`<br>  `while (curr) {`<br>  `next = curr->next;`<br>  `curr->next = prev;`<br>  `prev = curr;`<br>  `curr = next;`<br>  `}`<br>  `return prev;`"],answer:"4. `ListNode* prev = nullptr, *curr = head, *next = nullptr;`<br>  `while (curr) {`<br>  `next = curr->next;`<br>  `curr->next = prev;`<br>  `prev = curr;`<br>  `curr = next;`<br>  `}`<br>  `return prev;`",solution:"The code iterates through the linked list, reversing the pointers one node at a time. It uses three pointers: `prev`, `curr`, and `next`. `prev` points to the previously reversed portion of the list, initially `nullptr`. `curr` points to the current node being processed. `next` points to the node after the current node. The loop continues until `curr` reaches the end of the list. In each iteration, the `next` pointer is stored to preserve the original linked list structure. The `curr` node's `next` pointer is then set to `prev`, effectively reversing the pointer direction. The `prev` pointer is updated to `curr` to track the reversed portion, and the `curr` pointer is moved to `next` to process the next node in the list.  Finally, the `prev` pointer, which now points to the head of the reversed list, is returned."},{id:94,title:"# Q94. Find the middle node of a linked list.",text:void 0,code2:"```cpp<br>struct ListNode {<br>  int val;<br>  ListNode *next;<br>  ListNode() : val(0), next(nullptr) {}<br>  ListNode(int x) : val(x), next(nullptr) {}<br>  ListNode(int x, ListNode *next) : val(x), next(next) {}<br>};<br><br>ListNode* middleNode(ListNode* head) {<br>  // Implement the logic here<br>}<br>```",choices:["1. `return head;`","2. `return head->next;`","3. `return nullptr;`","4. `ListNode* slow = head, *fast = head;`<br>  `while (fast && fast->next) {`<br>  `slow = slow->next;`<br>  `fast = fast->next->next;`<br>  `}`<br>  `return slow;`"],answer:"4. `ListNode* slow = head, *fast = head;`<br>  `while (fast && fast->next) {`<br>  `slow = slow->next;`<br>  `fast = fast->next->next;`<br>  `}`<br>  `return slow;`",solution:"The code uses two pointers, `slow` and `fast`. `slow` moves one node at a time, while `fast` moves two nodes at a time.  When `fast` reaches the end of the list, `slow` will be pointing to the middle node.  If the list has an even number of nodes, `slow` will be pointing to the first of the two middle nodes.  This solution works because `fast` traverses the list twice as fast as `slow`, ensuring that when `fast` reaches the end, `slow` will have traversed half the list."},{id:95,title:"# Q95. Given an array of integers, find the two numbers that add up to a given target.",text:void 0,code2:"```cpp<br>vector<int> twoSum(vector<int>& nums, int target) {<br>  // Implement the logic here<br>}<br>```",choices:["1. `return {};`","2. `return {0, 1};`","3. `unordered_map<int, int> map;`<br>  `for (int i = 0; i < nums.size(); ++i) {`<br>  `int complement = target - nums[i];`<br>  `if (map.count(complement)) {`<br>  `return {map[complement], i};`<br>  `}`<br>  `map[nums[i]] = i;`<br>  `}`<br>  `return {};`","4. `for (int i = 0; i < nums.size(); ++i) {`<br>  `for (int j = i + 1; j < nums.size(); ++j) {`<br>  `if (nums[i] + nums[j] == target) {`<br>  `return {i, j};`<br>  `}`<br>  `}`<br>  `}`<br>  `return {};`"],answer:"3. `unordered_map<int, int> map;`<br>  `for (int i = 0; i < nums.size(); ++i) {`<br>  `int complement = target - nums[i];`<br>  `if (map.count(complement)) {`<br>  `return {map[complement], i};`<br>  `}`<br>  `map[nums[i]] = i;`<br>  `}`<br>  `return {};`",solution:"The code uses an `unordered_map` to store the numbers encountered in the array and their corresponding indices. It iterates through the array and calculates the complement for each number (the number that would add up to the target).  If the complement is found in the map, it means we have found the two numbers that add up to the target, and we return their indices.  Otherwise, we add the current number and its index to the map.  If no such pair is found, an empty vector is returned."},{id:96,title:"# Q96. Given a binary tree, check if it is a valid binary search tree.",text:void 0,code2:"```cpp<br>struct TreeNode {<br>  int val;<br>  TreeNode *left;<br>  TreeNode *right;<br>  TreeNode() : val(0), left(nullptr), right(nullptr) {}<br>  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}<br>  TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}<br>};<br><br>bool isValidBST(TreeNode* root) {<br>  // Implement the logic here<br>}<br>```",choices:["1. `return true;`","2. `return false;`","3. `return root == nullptr;`","4. `return helper(root, nullptr, nullptr);`<br>  `bool helper(TreeNode* node, TreeNode* min, TreeNode* max) {`<br>  `if (node == nullptr) {`<br>  `return true;`<br>  `}`<br>  `if (min != nullptr && node->val <= min->val) {`<br>  `return false;`<br>  `}`<br>  `if (max != nullptr && node->val >= max->val) {`<br>  `return false;`<br>  `}`<br>  `return helper(node->left, min, node) && helper(node->right, node, max);`<br>  `}`"],answer:"4. `return helper(root, nullptr, nullptr);`<br>  `bool helper(TreeNode* node, TreeNode* min, TreeNode* max) {`<br>  `if (node == nullptr) {`<br>  `return true;`<br>  `}`<br>  `if (min != nullptr && node->val <= min->val) {`<br>  `return false;`<br>  `}`<br>  `if (max != nullptr && node->val >= max->val) {`<br>  `return false;`<br>  `}`<br>  `return helper(node->left, min, node) && helper(node->right, node, max);`<br>  `}`",solution:"The code utilizes a helper function `helper` to recursively check the validity of the binary search tree. The function takes a node, a minimum value, and a maximum value as arguments.  It checks if the node is `nullptr`, returning `true` if it is. It then checks if the node's value is within the specified range (greater than the `min` value and less than the `max` value). If not, it returns `false`.  Otherwise, it recursively checks the left subtree with the current node as the new `max` value and the right subtree with the current node as the new `min` value.  If both subtrees are valid binary search trees, the function returns `true`.  The `isValidBST` function simply calls the `helper` function with the root node and `nullptr` for both the minimum and maximum values, as the root node has no constraints."},{id:97,title:"# Q97. Given a string, check if it is a palindrome.",text:void 0,code2:"```cpp<br>bool isPalindrome(string s) {<br>  // Implement the logic here<br>}<br>```",choices:["1. `return true;`","2. `return false;`","3. `return s == string(s.rbegin(), s.rend());`","4. `int left = 0, right = s.size() - 1;`<br>  `while (left < right) {`<br>  `if (s[left] != s[right]) {`<br>  `return false;`<br>  `}`<br>  `left++;`<br>  `right--;`<br>  `}`<br>  `return true;`"],answer:"3. `return s == string(s.rbegin(), s.rend());`",solution:"This code utilizes the fact that reversing a palindrome results in the same string.  It creates a new string by reversing the original string and compares them.  If the two strings are equal, the original string is a palindrome and the function returns `true`.  Otherwise, it returns `false`."},{id:98,title:"# Q98. Given a string, find the length of the longest substring without repeating characters.",text:void 0,code2:"```cpp<br>int lengthOfLongestSubstring(string s) {<br>  // Implement the logic here<br>}<br>```",choices:["1. `return 0;`","2. `return s.size();`","3. `int maxLength = 0;`<br>  `for (int i = 0; i < s.size(); ++i) {`<br>  `for (int j = i + 1; j <= s.size(); ++j) {`<br>  `if (isUnique(s, i, j)) {`<br>  `maxLength = max(maxLength, j - i);`<br>  `}`<br>  `}`<br>  `}`<br>  `return maxLength;`<br>  `bool isUnique(string s, int start, int end) {`<br>  `unordered_set<char> seen;`<br>  `for (int i = start; i < end; ++i) {`<br>  `if (seen.count(s[i])) {`<br>  `return false;`<br>  `}`<br>  `seen.insert(s[i]);`<br>  `}`<br>  `return true;`<br>  `}`","4. `int maxLength = 0;`<br>  `unordered_set<char> seen;`<br>  `int left = 0;`<br>  `for (int right = 0; right < s.size(); ++right) {`<br>  `while (seen.count(s[right])) {`<br>  `seen.erase(s[left]);`<br>  `left++;`<br>  `}`<br>  `seen.insert(s[right]);`<br>  `maxLength = max(maxLength, right - left + 1);`<br>  `}`<br>  `return maxLength;`"],answer:"4. `int maxLength = 0;`<br>  `unordered_set<char> seen;`<br>  `int left = 0;`<br>  `for (int right = 0; right < s.size(); ++right) {`<br>  `while (seen.count(s[right])) {`<br>  `seen.erase(s[left]);`<br>  `left++;`<br>  `}`<br>  `seen.insert(s[right]);`<br>  `maxLength = max(maxLength, right - left + 1);`<br>  `}`<br>  `return maxLength;`",solution:"The code uses a sliding window approach with two pointers, `left` and `right`. `left` points to the beginning of the current substring, and `right` points to the end.  It uses an `unordered_set` to keep track of the characters seen in the current substring.  The loop iterates through the string using the `right` pointer.  For each character, it checks if it is already present in the `seen` set.  If it is, it means there's a repeating character.  In this case, it removes the character at `left` from the `seen` set and moves `left` to the right until the repeating character is removed.  Then, it adds the current character to the `seen` set and updates `maxLength` to the maximum length of the current substring.  This process continues until the end of the string is reached.  Finally, `maxLength` is returned, representing the length of the longest substring without repeating characters."},{id:100,title:"# Q100. Given a sorted array, remove duplicates in-place.",text:void 0,code2:"```cpp<br>int removeDuplicates(vector<int>& nums) {<br>  // Implement the logic here<br>}<br>```",choices:["1. `return 0;`","2. `return nums.size();`","3. `if (nums.empty()) {`<br>  `return 0;`<br>  `}`<br>  `int j = 0;`<br>  `for (int i = 1; i < nums.size(); ++i) {`<br>  `if (nums[i] != nums[j]) {`<br>  `j++;`<br>  `nums[j] = nums[i];`<br>  `}`<br>  `}`<br>  `return j + 1;`","4. `sort(nums.begin(), nums.end());`<br>  `return nums.size();`"],answer:"3. `if (nums.empty()) {`<br>  `return 0;`<br>  `}`<br>  `int j = 0;`<br>  `for (int i = 1; i < nums.size(); ++i) {`<br>  `if (nums[i] != nums[j]) {`<br>  `j++;`<br>  `nums[j] = nums[i];`<br>  `}`<br>  `}`<br>  `return j + 1;`",solution:"The code iterates through the array using two pointers, `i` and `j`. `j` is used to track the position of the next unique element in the array.  The loop starts at `i = 1` to compare each element with the previous element at `j`.  If the current element is different from the previous element, it means it is a unique element.  In this case, we increment `j` and copy the current element to the position pointed to by `j`.  After the loop, `j + 1` represents the number of unique elements in the array."},{id:101,title:"# Q101. Implement the `maxDepth` function for a binary tree.",text:void 0,code2:"```cpp<br>struct TreeNode {<br>  int val;<br>  TreeNode *left;<br>  TreeNode *right;<br>  TreeNode() : val(0), left(nullptr), right(nullptr) {}<br>  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}<br>  TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}<br>};<br><br>int maxDepth(TreeNode* root) {<br>  // Implement the logic here<br>}<br>```",choices:["1. `return 0;`","2. `return 1;`","3. `if (root == nullptr) {`<br>  `return 0;`<br>  `}`<br>  `return max(maxDepth(root->left), maxDepth(root->right)) + 1;`","4. `if (root == nullptr) {`<br>  `return 1;`<br>  `}`<br>  `return max(maxDepth(root->left), maxDepth(root->right));`"],answer:"3. `if (root == nullptr) {`<br>  `return 0;`<br>  `}`<br>  `return max(maxDepth(root->left), maxDepth(root->right)) + 1;`",solution:"The code utilizes a recursive approach to calculate the maximum depth of the binary tree.  If the `root` is `nullptr`, it means the tree is empty, and the depth is 0.  Otherwise, it recursively calculates the maximum depths of the left and right subtrees.  The maximum depth of the tree is then calculated by taking the maximum of the left and right subtree depths and adding 1 to account for the current node.  The final depth is then returned."},{id:102,title:"# Q102. Given a string, find the first non-repeating character.",text:void 0,code2:"```cpp<br>char firstNonRepeatingChar(string s) {<br>  // Implement the logic here<br>}<br>```",choices:["1. `return ' ';`","2. `return s[0];`","3. `unordered_map<char, int> charCount;`<br>  `for (char c : s) {`<br>  `charCount[c]++;`<br>  `}`<br>  `for (char c : s) {`<br>  `if (charCount[c] == 1) {`<br>  `return c;`<br>  `}`<br>  `}`<br>  `return ' ';`","4. `for (int i = 0; i < s.size(); ++i) {`<br>  `if (s.find(s[i]) == s.rfind(s[i])) {`<br>  `return s[i];`<br>  `}`<br>  `}`<br>  `return ' ';`"],answer:"3. `unordered_map<char, int> charCount;`<br>  `for (char c : s) {`<br>  `charCount[c]++;`<br>  `}`<br>  `for (char c : s) {`<br>  `if (charCount[c] == 1) {`<br>  `return c;`<br>  `}`<br>  `}`<br>  `return ' ';`",solution:"The code uses an `unordered_map` to count the occurrences of each character in the string.  It then iterates through the string again, and for each character, it checks if its count is 1 (meaning it appears only once).  If so, it returns that character.  If no non-repeating character is found, it returns a space."},{id:103,title:"# Q103. Given a sorted array and a target value, find the index of the target value if it exists, otherwise return -1.",text:void 0,code2:"```cpp<br>int search(vector<int>& nums, int target) {<br>  // Implement the logic here<br>}<br>```",choices:["1. `return -1;`","2. `return 0;`","3. `return nums.size() - 1;`","4. `int left = 0, right = nums.size() - 1;`<br>  `while (left <= right) {`<br>  `int mid = left + (right - left) / 2;`<br>  `if (nums[mid] == target) {`<br>  `return mid;`<br>  `}` else if (nums[mid] < target) {`<br>  `left = mid + 1;`<br>  `} else {`<br>  `right = mid - 1;`<br>  `}`<br>  `}`<br>  `return -1;`"],answer:"4. `int left = 0, right = nums.size() - 1;`<br>  `while (left <= right) {`<br>  `int mid = left + (right - left) / 2;`<br>  `if (nums[mid] == target) {`<br>  `return mid;`<br>  `}` else if (nums[mid] < target) {`<br>  `left = mid + 1;`<br>  `} else {`<br>  `right = mid - 1;`<br>  `}`<br>  `}`<br>  `return -1;`",solution:"The code implements binary search, which is a highly efficient algorithm for searching in a sorted array. It starts by initializing two pointers, `left` and `right`, to the beginning and end of the array, respectively.  The `while` loop continues as long as `left` is less than or equal to `right`. In each iteration, the `mid` pointer is calculated as the middle index of the remaining search range.  The target value is then compared with the value at the `mid` index.  If they are equal, the index `mid` is returned.  If the value at `mid` is less than the target, the `left` pointer is moved to `mid + 1`, indicating that the target value (if present) is in the right half of the search range.  Otherwise, the `right` pointer is moved to `mid - 1`, indicating that the target value (if present) is in the left half of the search range.  If the loop completes without finding the target value, the function returns -1."},{id:104,title:"# Q104. Given a sorted array, find the peak element (an element that is greater than its neighbors).",text:void 0,code2:"```cpp<br>int findPeakElement(vector<int>& nums) {<br>  // Implement the logic here<br>}<br>```",choices:["1. `return 0;`","2. `return nums.size() - 1;`","3. `int left = 0, right = nums.size() - 1;`<br>  `while (left < right) {`<br>  `int mid = left + (right - left) / 2;`<br>  `if (nums[mid] < nums[mid + 1]) {`<br>  `left = mid + 1;`<br>  `} else {`<br>  `right = mid;`<br>  `}`<br>  `}`<br>  `return left;`","4. `for (int i = 1; i < nums.size() - 1; ++i) {`<br>  `if (nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) {`<br>  `return i;`<br>  `}`<br>  `}`<br>  `return 0;`"],answer:"3. `int left = 0, right = nums.size() - 1;`<br>  `while (left < right) {`<br>  `int mid = left + (right - left) / 2;`<br>  `if (nums[mid] < nums[mid + 1]) {`<br>  `left = mid + 1;`<br>  `} else {`<br>  `right = mid;`<br>  `}`<br>  `}`<br>  `return left;`",solution:"The code implements a binary search approach to find the peak element. It initializes two pointers, `left` and `right`, to the beginning and end of the array, respectively.  The `while` loop continues as long as `left` is less than `right`.  In each iteration, the `mid` pointer is calculated as the middle index of the remaining search range. The code then compares the value at `mid` with the value at `mid + 1`.  If the value at `mid` is less than the value at `mid + 1`, it means the peak element is in the right half of the search range, so the `left` pointer is moved to `mid + 1`.  Otherwise, the peak element is in the left half of the search range, and the `right` pointer is moved to `mid`.  After the loop, the `left` pointer will be pointing to the peak element."},{id:105,title:"# Q105. Given a string, check if it is a valid anagram of another string.",text:void 0,code2:"```cpp<br>bool isAnagram(string s, string t) {<br>  // Implement the logic here<br>}<br>```",choices:["1. `return true;`","2. `return false;`","3. `if (s.size() != t.size()) {`<br>  `return false;`<br>  `}`<br>  `sort(s.begin(), s.end());`<br>  `sort(t.begin(), t.end());`<br>  `return s == t;`","4. `unordered_map<char, int> charCount;`<br>  `for (char c : s) {`<br>  `charCount[c]++;`<br>  `}`<br>  `for (char c : t) {`<br>  `if (--charCount[c] < 0) {`<br>  `return false;`<br>  `}`<br>  `}`<br>  `return true;`"],answer:"4. `unordered_map<char, int> charCount;`<br>  `for (char c : s) {`<br>  `charCount[c]++;`<br>  `}`<br>  `for (char c : t) {`<br>  `if (--charCount[c] < 0) {`<br>  `return false;`<br>  `}`<br>  `}`<br>  `return true;`",solution:"The code uses an `unordered_map` to count the occurrences of each character in the first string `s`.  It then iterates through the second string `t`.  For each character in `t`, it decrements its count in the map.  If the count becomes negative, it means the character appears more times in `t` than in `s`, so the function returns `false`.  If the loop completes without finding any negative counts, it means all characters in `t` are present in `s` with the same frequency, and the function returns `true`."},{id:107,title:"# Q107. What is the primary use case for a hash table?",text:void 0,code2:"  ",choices:["1. Sorting data in ascending order","2. Implementing a stack data structure","3. Efficiently storing and retrieving data based on keys","4. Representing hierarchical relationships between elements"],answer:"3. Efficiently storing and retrieving data based on keys",solution:"Hash tables excel at providing fast access to data by using a hash function to map keys to specific locations in the table. This allows for near constant-time (O(1)) lookups, insertions, and deletions on average, making them ideal for scenarios where rapid data retrieval is crucial."},{id:108,title:"# Q108. Which data structure is best suited for implementing a Last-In, First-Out (LIFO) behavior?",text:void 0,code2:"  ",choices:["1. Queue","2. Stack","3. Heap","4. Tree"],answer:"2. Stack",solution:"Stacks are designed to operate on a LIFO principle, where the last element added is the first one to be removed.  Think of a stack of plates – you always take the top plate off first."},{id:109,title:"# Q109. What is the time complexity of inserting an element into a binary search tree?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(log n)","3. O(1)","4. O(n log n)"],answer:"2. O(log n)",solution:"On average, inserting into a balanced binary search tree takes logarithmic time. This is because the tree's structure allows for efficient partitioning and traversal to find the correct insertion point. In the worst case, if the tree becomes unbalanced, insertion could take linear time."},{id:110,title:"# Q110. What is the purpose of a priority queue?",text:void 0,code2:"  ",choices:["1. Storing elements in a specific order based on their priority","2. Implementing a stack data structure","3. Sorting data in ascending order","4. Representing hierarchical relationships between elements"],answer:"1. Storing elements in a specific order based on their priority",solution:"A priority queue prioritizes elements based on a defined ordering. It allows for efficient retrieval of the highest (or lowest) priority element, making it ideal for tasks like scheduling, resource allocation, and handling events in a specific order."},{id:111,title:"# Q111. What is the advantage of using a heap over a simple array for implementing a priority queue?",text:void 0,code2:"  ",choices:["1. Heaps offer constant-time access to the element with the highest priority.","2. Heaps allow for more efficient insertion and deletion operations while maintaining the priority order.","3. Heaps are easier to implement than arrays.","4. Heaps use less memory than arrays."],answer:"2. Heaps allow for more efficient insertion and deletion operations while maintaining the priority order.",solution:"While a simple array could technically store priority queue elements, heaps provide the advantage of efficient insertion and deletion operations that maintain the priority order. This is due to the heap's property of always keeping the highest (or lowest) priority element at the root."},{id:112,title:"# Q112. What is the main difference between a binary search tree and a heap?",text:void 0,code2:"  ",choices:["1. Binary search trees store elements in sorted order, while heaps store elements based on their priority.","2. Binary search trees allow for efficient searching, while heaps allow for efficient insertion and deletion.","3. Binary search trees are implemented using arrays, while heaps are implemented using linked lists.","4. Binary search trees are used for sorting, while heaps are used for scheduling."],answer:"1. Binary search trees store elements in sorted order, while heaps store elements based on their priority.",solution:"Binary search trees maintain a sorted order based on the values of the nodes, allowing for efficient searching. Heaps, on the other hand, prioritize elements based on a defined order (typically min-heap or max-heap), making them suitable for scenarios where priority is the primary factor."},{id:113,title:"# Q113. What is the time complexity of sorting an array using bubble sort in the best-case scenario?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(n log n)","3. O(n^2)","4. O(1)"],answer:"1. O(n)",solution:"In the best-case scenario, when the array is already sorted, bubble sort will only need to iterate through the array once to verify its sorted state. This results in a time complexity of O(n)."},{id:115,title:"# Q115. Which of the following is a common application of a trie (prefix tree)?",text:void 0,code2:"  ",choices:["1. Implementing a stack data structure","2. Sorting data in ascending order","3. Autocomplete suggestions in a search bar","4. Finding the shortest path in a graph"],answer:"3. Autocomplete suggestions in a search bar",solution:"Tries are specifically designed for efficient prefix-based search, making them a suitable choice for autocomplete functionalities. They allow for quick retrieval of words or suggestions based on the prefix entered by the user."},{id:116,title:"# Q116. What is the main advantage of using a linked list over an array for implementing a queue?",text:void 0,code2:"  ",choices:["1. Linked lists offer constant-time insertion and deletion at the front of the queue.","2. Linked lists are easier to implement than arrays.","3. Linked lists use less memory than arrays.","4. Linked lists allow for faster random access to elements."],answer:"1. Linked lists offer constant-time insertion and deletion at the front of the queue.",solution:"When implementing a queue using a linked list, insertions and deletions at the front (enqueue and dequeue) can be performed in constant time. This is because only pointer manipulation is required, unlike arrays where shifting elements might be necessary."},{id:117,title:"# Q117. What is the primary use case for a graph data structure?",text:void 0,code2:"  ",choices:["1. Representing hierarchical relationships between elements","2. Modeling interconnected networks and relationships","3. Sorting data in ascending order","4. Implementing a stack data structure"],answer:"2. Modeling interconnected networks and relationships",solution:"Graphs are ideal for representing networks and relationships between entities.  They allow for modeling connections, dependencies, flow, and interactions, making them valuable in fields like social networks, transportation systems, network routing, and more."},{id:118,title:"# Q118. What is the time complexity of finding the minimum element in a min-heap?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(log n)","3. O(1)","4. O(n log n)"],answer:"3. O(1)",solution:"In a min-heap, the minimum element is always stored at the root.  Therefore, accessing it directly takes constant time."},{id:119,title:"# Q119. Which of the following is NOT a common sorting algorithm?",text:void 0,code2:"  ",choices:["1. Merge Sort","2. Quick Sort","3. Insertion Sort","4. Binary Search"],answer:"4. Binary Search",solution:"Binary Search is a search algorithm designed for finding a specific element within a sorted array.  Sorting algorithms like Merge Sort, Quick Sort, and Insertion Sort arrange elements in a specific order."},{id:120,title:"# Q120. What is the primary difference between a directed graph and an undirected graph?",text:void 0,code2:"  ",choices:["1. Directed graphs have edges with a specific direction, while undirected graphs do not.","2. Undirected graphs have edges with a specific direction, while directed graphs do not.","3. Directed graphs are used to represent hierarchies, while undirected graphs are used to represent networks.","4. Undirected graphs are used to represent hierarchies, while directed graphs are used to represent networks."],answer:"1. Directed graphs have edges with a specific direction, while undirected graphs do not.",solution:"In a directed graph, edges represent one-way connections (e.g., a road network with one-way streets), while undirected graphs represent two-way connections (e.g., a social network where individuals can be friends with each other)."},{id:121,title:"# Q121. What is the purpose of a disjoint set data structure?",text:void 0,code2:"  ",choices:["1. Storing elements in a specific order based on their priority","2. Representing a collection of sets where each element belongs to exactly one set","3. Implementing a stack data structure","4. Sorting data in ascending order"],answer:"2. Representing a collection of sets where each element belongs to exactly one set",solution:"Disjoint sets, or union-find data structures, are used to manage a collection of sets where each element belongs to only one set.  They are particularly useful for handling connectivity and grouping problems."},{id:122,title:"# Q122. Which data structure is often used to implement a priority queue?",text:void 0,code2:"  ",choices:["1. Linked List","2. Array","3. Heap","4. Stack"],answer:"3. Heap",solution:"Heaps are commonly used for implementing priority queues. Their efficient insertion, deletion, and retrieval of the highest (or lowest) priority element make them suitable for prioritizing operations."},{id:123,title:"# Q123. What is the time complexity of finding the kth smallest element in a sorted array?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"2. O(1)",solution:"Since the array is already sorted, accessing the kth smallest element directly by indexing takes constant time."},{id:124,title:"# Q124. What is the primary difference between a stack and a queue in terms of data access?",text:void 0,code2:"  ",choices:["1. Stacks are LIFO (Last-In, First-Out), queues are FIFO (First-In, First-Out)","2. Stacks are FIFO, queues are LIFO","3. Stacks use arrays, queues use linked lists","4. Stacks use linked lists, queues use arrays"],answer:"1. Stacks are LIFO (Last-In, First-Out), queues are FIFO (First-In, First-Out)",solution:"Stacks follow a LIFO order, meaning the last element added is the first to be removed.  Queues operate on a FIFO principle, where the first element added is the first to be removed."},{id:125,title:"# Q125. What is the time complexity of deleting an element from the front of a queue implemented using a linked list?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"2. O(1)",solution:"Deleting an element from the front of a queue implemented using a linked list involves simply adjusting the head pointer, which takes constant time."},{id:126,title:"# Q126. What is the time complexity of inserting an element at the end of a queue implemented using an array?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"1. O(n)",solution:"Inserting at the end of an array-based queue may require shifting elements to make space for the new element, leading to linear time complexity."},{id:127,title:"# Q127. Which of the following is a common use case for a heap data structure?",text:void 0,code2:"  ",choices:["1. Implementing a stack data structure","2. Sorting data in ascending order","3. Efficiently storing and retrieving data based on keys","4. Scheduling tasks based on their priority"],answer:"4. Scheduling tasks based on their priority",solution:"Heaps are widely used for scheduling tasks based on their priority. Their efficient retrieval of the highest (or lowest) priority element makes them suitable for prioritizing tasks."},{id:128,title:"# Q128. What is the time complexity of finding the maximum element in a heap?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(log n)","3. O(1)","4. O(n log n)"],answer:"3. O(1)",solution:"The maximum (or minimum) element in a heap is always located at the root, making it directly accessible in constant time."},{id:129,title:"# Q129. What is the time complexity of deleting an element from the end of a linked list?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"1. O(n)",solution:"Deleting an element from the end of a linked list requires iterating through the list until the second-to-last node is reached, leading to linear time complexity."},{id:130,title:"# Q130. Which of the following is NOT a valid binary tree traversal method?",text:void 0,code2:"  ",choices:["1. Preorder Traversal","2. Inorder Traversal","3. Postorder Traversal","4. Random Traversal"],answer:"4. Random Traversal",solution:"While various traversal strategies exist, 'Random Traversal' is not a standardized or commonly used method.  Binary tree traversal methods are typically structured for specific orderings of node visitation."},{id:131,title:"# Q131. What is the time complexity of finding the depth of a binary tree?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(log n)","3. O(1)","4. O(n log n)"],answer:"1. O(n)",solution:"Finding the depth of a binary tree requires visiting all nodes in the worst case, resulting in linear time complexity."},{id:132,title:"# Q132. Which of the following is a common application of a graph data structure?",text:void 0,code2:"  ",choices:["1. Implementing a stack data structure","2. Sorting data in ascending order","3. Modeling social networks","4. Efficiently storing and retrieving data based on keys"],answer:"3. Modeling social networks",solution:"Graphs are ideal for representing complex relationships between entities, making them suitable for modeling social networks, where connections and interactions between users are crucial."},{id:133,title:"# Q133. What is the time complexity of inserting an element at the beginning of a linked list?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"2. O(1)",solution:"Inserting at the beginning of a linked list involves adjusting the head pointer and making the new node point to the original head, which takes constant time."},{id:134,title:"# Q134. What is the primary use case for a stack data structure?",text:void 0,code2:"  ",choices:["1. Implementing a queue data structure","2. Sorting data in ascending order","3. Handling function calls in a program","4. Efficiently storing and retrieving data based on keys"],answer:"3. Handling function calls in a program",solution:"Stacks are essential for managing function calls in programs. They keep track of the order in which functions are called and ensure that they are returned in the reverse order."},{id:135,title:"# Q135. What is the time complexity of searching for an element in a binary search tree in the best-case scenario?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(log n)","3. O(1)","4. O(n log n)"],answer:"3. O(1)",solution:"In the best case, when the target element is the root of the tree, it can be found in constant time."},{id:136,title:"# Q136. Which of the following is a common sorting algorithm with an average time complexity of O(n log n)?",text:void 0,code2:"  ",choices:["1. Bubble Sort","2. Insertion Sort","3. Merge Sort","4. Selection Sort"],answer:"3. Merge Sort",solution:"Merge Sort consistently maintains an average time complexity of O(n log n), making it a reliable choice for large datasets."},{id:138,title:"# Q138. What is the time complexity of deleting an element from a heap?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(log n)","3. O(1)","4. O(n log n)"],answer:"2. O(log n)",solution:"Deleting an element from a heap involves maintaining the heap property by rearranging the elements, resulting in logarithmic time complexity."},{id:139,title:"# Q139. What is the time complexity of searching for an element in a hash table in the worst-case scenario?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"1. O(n)",solution:"In the worst-case scenario, when all elements hash to the same location, searching in a hash table degenerates to a linear search, taking linear time."},{id:140,title:"# Q140. Which of the following is NOT a common dynamic programming problem?",text:void 0,code2:"  ",choices:["1. Fibonacci sequence","2. Knapsack problem","3. Traveling salesman problem","4. Quick Sort"],answer:"4. Quick Sort",solution:"Quick Sort is a divide-and-conquer algorithm, not a dynamic programming algorithm.  Dynamic programming relies on storing and reusing previously calculated results."},{id:141,title:"# Q141. What is the main advantage of using a linked list over an array for implementing a stack?",text:void 0,code2:"  ",choices:["1. Linked lists offer constant-time insertion and deletion at the top of the stack.","2. Linked lists are easier to implement than arrays.","3. Linked lists use less memory than arrays.","4. Linked lists allow for faster random access to elements."],answer:"1. Linked lists offer constant-time insertion and deletion at the top of the stack.",solution:"Linked lists allow for fast insertion and deletion at the top of the stack because they only involve adjusting pointers, avoiding the need to shift elements like in arrays."},{id:142,title:"# Q142. What is the purpose of a breadth-first search (BFS) algorithm?",text:void 0,code2:"  ",choices:["1. To find the shortest path between two nodes in an unweighted graph","2. To sort elements in alphabetical order","3. To find the maximum element in a graph","4. To delete an element from a graph"],answer:"1. To find the shortest path between two nodes in an unweighted graph",solution:"BFS explores a graph level by level, making it ideal for finding the shortest path in unweighted graphs.  It systematically explores all neighbors at a current level before moving to the next level."},{id:144,title:"# Q144. Which of the following is NOT a common application of a trie (prefix tree)?",text:void 0,code2:"  ",choices:["1. Autocomplete suggestions in a search bar","2. Spell checking","3. Implementing a queue data structure","4. Dictionary implementations"],answer:"3. Implementing a queue data structure",solution:"Tries are optimized for string-based operations like prefix search and are not directly related to queue implementations."},{id:145,title:"# Q145. What is the time complexity of finding the mode of an unsorted array?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"1. O(n)",solution:"Finding the mode of an unsorted array requires scanning all elements to determine the most frequently occurring element, resulting in linear time complexity."},{id:146,title:"# Q146. Which of the following is a common self-balancing binary search tree?",text:void 0,code2:"  ",choices:["1. AVL Tree","2. B-Tree","3. Heap","4. Trie"],answer:"1. AVL Tree",solution:"AVL Trees are a type of self-balancing binary search tree that ensure a balanced structure to maintain efficient search operations."},{id:147,title:"# Q147. What is the purpose of a depth-first search (DFS) algorithm?",text:void 0,code2:"  ",choices:["1. To find the shortest path between two nodes in an unweighted graph","2. To find all reachable nodes from a given source node","3. To sort elements in alphabetical order","4. To delete an element from a graph"],answer:"2. To find all reachable nodes from a given source node",solution:"DFS explores a graph by going as deep as possible along each branch before backtracking, making it effective for finding all reachable nodes from a source node."},{id:148,title:"# Q148. What is the time complexity of sorting an array using selection sort?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(n log n)","3. O(n^2)","4. O(1)"],answer:"3. O(n^2)",solution:"Selection Sort has a time complexity of O(n^2), as it repeatedly scans the array to find the minimum (or maximum) element and places it in the correct position."},{id:149,title:"# Q149. What is the primary use case for a queue data structure?",text:void 0,code2:"  ",choices:["1. Implementing a stack data structure","2. Sorting data in ascending order","3. Handling function calls in a program","4. Processing items in a first-come, first-served order"],answer:"4. Processing items in a first-come, first-served order",solution:"Queues are designed for processing items in a FIFO order, making them suitable for scenarios like managing print jobs, handling requests in a service queue, or simulating real-world queueing systems."},{id:150,title:"# Q150. What is the time complexity of inserting an element into a heap?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(log n)","3. O(1)","4. O(n log n)"],answer:"2. O(log n)",solution:"Inserting an element into a heap involves maintaining the heap property, which requires rearranging elements, resulting in logarithmic time complexity."},{id:151,title:"# Q151. Which data structure is best suited for implementing a First-In, First-Out (FIFO) behavior?",text:void 0,code2:"  ",choices:["1. Stack","2. Queue","3. Heap","4. Tree"],answer:"2. Queue",solution:"Queues are specifically designed to operate on a FIFO principle, where the first element added is the first to be removed."},{id:152,title:"# Q152. What is the time complexity of finding the range of a sorted array?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"2. O(1)",solution:"Finding the range of a sorted array involves accessing the first and last elements, which takes constant time."},{id:153,title:"# Q153. Which of the following is a common application of a dynamic programming algorithm?",text:void 0,code2:"  ",choices:["1. Implementing a stack data structure","2. Sorting data in ascending order","3. Finding the shortest path in a weighted graph","4. Efficiently storing and retrieving data based on keys"],answer:"3. Finding the shortest path in a weighted graph",solution:"Dynamic programming algorithms excel at solving problems by breaking them down into smaller subproblems and reusing previously computed solutions.  This makes them suitable for problems like finding the shortest path in a graph, where subpaths can be reused."},{id:154,title:"# Q154. What is the time complexity of deleting an element from the top of a stack implemented using a linked list?",text:void 0,code2:"  ",choices:["1. O(n)","2. O(1)","3. O(log n)","4. O(n log n)"],answer:"2. O(1)",solution:"Deleting an element from the top of a linked list-based stack involves adjusting the top pointer, which takes constant time."}],s=[{id:166,title:"# Q166. Given a binary tree, find its maximum depth.",text:void 0,code2:"```cpp<br>struct TreeNode {<br>  int val;<br>  TreeNode *left;<br>  TreeNode *right;<br>  TreeNode() : val(0), left(nullptr), right(nullptr) {}<br>  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}<br>  TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}<br>};<br><br>int maxDepth(TreeNode* root) {<br>  // Implement the logic here<br>}<br>```",choices:["1. `return 0;`","2. `return 1;`","3. `if (root == nullptr) {`<br>  `return 0;`<br>  `}`<br>  `return max(maxDepth(root->left), maxDepth(root->right)) + 1;`","4. `if (root == nullptr) {`<br>  `return 1;`<br>  `}`<br>  `return max(maxDepth(root->left), maxDepth(root->right));`"],answer:"3. `if (root == nullptr) {`<br>  `return 0;`<br>  `}`<br>  `return max(maxDepth(root->left), maxDepth(root->right)) + 1;`",solution:"```cpp<br>int maxDepth(TreeNode* root) {<br>  if (root == nullptr) {<br>    return 0;<br>  }<br>  return max(maxDepth(root->left), maxDepth(root->right)) + 1;<br>}<br>```<br><br>This code calculates the maximum depth of a binary tree recursively. If the root is `nullptr`, it means the tree is empty, and the depth is 0. Otherwise, it recursively calculates the maximum depths of the left and right subtrees.  The maximum depth of the tree is then calculated by taking the maximum of the left and right subtree depths and adding 1 to account for the current node.  The final depth is then returned."},{id:167,title:"# Q167. Given a string, find the length of the longest substring without repeating characters.",text:void 0,code2:"```cpp<br>int lengthOfLongestSubstring(string s) {<br>  // Implement the logic here<br>}<br>```",choices:["1. `return 0;`","2. `return s.size();`","3. `int maxLength = 0;`<br>  `for (int i = 0; i < s.size(); ++i) {`<br>  `for (int j = i + 1; j <= s.size(); ++j) {`<br>  `if (isUnique(s, i, j)) {`<br>  `maxLength = max(maxLength, j - i);`<br>  `}`<br>  `}`<br>  `}`<br>  `return maxLength;`<br>  `bool isUnique(string s, int start, int end) {`<br>  `unordered_set<char> seen;`<br>  `for (int i = start; i < end; ++i) {`<br>  `if (seen.count(s[i])) {`<br>  `return false;`<br>  `}`<br>  `seen.insert(s[i]);`<br>  `}`<br>  `return true;`<br>  `}`","4. `int maxLength = 0;`<br>  `unordered_set<char> seen;`<br>  `int left = 0;`<br>  `for (int right = 0; right < s.size(); ++right) {`<br>  `while (seen.count(s[right])) {`<br>  `seen.erase(s[left]);`<br>  `left++;`<br>  `}`<br>  `seen.insert(s[right]);`<br>  `maxLength = max(maxLength, right - left + 1);`<br>  `}`<br>  `return maxLength;`"],answer:"4. `int maxLength = 0;`<br>  `unordered_set<char> seen;`<br>  `int left = 0;`<br>  `for (int right = 0; right < s.size(); ++right) {`<br>  `while (seen.count(s[right])) {`<br>  `seen.erase(s[left]);`<br>  `left++;`<br>  `}`<br>  `seen.insert(s[right]);`<br>  `maxLength = max(maxLength, right - left + 1);`<br>  `}`<br>  `return maxLength;`",solution:"```cpp<br>int lengthOfLongestSubstring(string s) {<br>  int maxLength = 0;<br>  unordered_set<char> seen;<br>  int left = 0;<br>  for (int right = 0; right < s.size(); ++right) {<br>    while (seen.count(s[right])) {<br>      seen.erase(s[left]);<br>      left++;<br>    }<br>    seen.insert(s[right]);<br>    maxLength = max(maxLength, right - left + 1);<br>  }<br>  return maxLength;<br>}<br>```<br><br>This code uses a sliding window approach with two pointers, `left` and `right`. `left` points to the beginning of the current substring, and `right` points to the end.  It uses an `unordered_set` to keep track of the characters seen in the current substring.  The loop iterates through the string using the `right` pointer.  For each character, it checks if it is already present in the `seen` set.  If it is, it means there's a repeating character.  In this case, it removes the character at `left` from the `seen` set and moves `left` to the right until the repeating character is removed.  Then, it adds the current character to the `seen` set and updates `maxLength` to the maximum length of the current substring.  This process continues until the end of the string is reached.  Finally, `maxLength` is returned, representing the length of the longest substring without repeating characters."},{id:168,title:"# Q168. Given a string, check if it is a valid parentheses string.",text:void 0,code2:"```cpp<br>bool isValidParentheses(string s) {<br>  // Implement the logic here<br>}<br>```",choices:["1. `return true;`","2. `return false;`","3. `stack<char> st;`<br>  `for (char c : s) {`<br>  `if (c == '(' || c == '{' || c == '[') {`<br>  `st.push(c);`<br>  `}` else if (c == ')' && !st.empty() && st.top() == '(') {`<br>  `st.pop();`<br>  `} else if (c == '}' && !st.empty() && st.top() == '{') {`<br>  `st.pop();`<br>  `} else if (c == ']' && !st.empty() && st.top() == '[') {`<br>  `st.pop();`<br>  `} else {`<br>  `return false;`<br>  `}`<br>  `}`<br>  `return st.empty();`","4. `if (s.size() % 2 != 0) {`<br>  `return false;`<br>  `}`<br>  `for (int i = 0; i < s.size() / 2; ++i) {`<br>  `if (s[i] != s[s.size() - i - 1]) {`<br>  `return false;`<br>  `}`<br>  `}`<br>  `return true;`"],answer:"3. `stack<char> st;`<br>  `for (char c : s) {`<br>  `if (c == '(' || c == '{' || c == '[') {`<br>  `st.push(c);`<br>  `}` else if (c == ')' && !st.empty() && st.top() == '(') {`<br>  `st.pop();`<br>  `} else if (c == '}' && !st.empty() && st.top() == '{') {`<br>  `st.pop();`<br>  `} else if (c == ']' && !st.empty() && st.top() == '[') {`<br>  `st.pop();`<br>  `} else {`<br>  `return false;`<br>  `}`<br>  `}`<br>  `return st.empty();`",solution:"```cpp<br>bool isValidParentheses(string s) {<br>  stack<char> st;<br>  for (char c : s) {<br>    if (c == '(' || c == '{' || c == '[') {<br>      st.push(c);<br>    } else if (c == ')' && !st.empty() && st.top() == '(') {<br>      st.pop();<br>    } else if (c == '}' && !st.empty() && st.top() == '{') {<br>      st.pop();<br>    } else if (c == ']' && !st.empty() && st.top() == '[') {<br>      st.pop();<br>    } else {<br>      return false;<br>    }<br>  }<br>  return st.empty();<br>}<br>```<br><br>This code uses a stack to keep track of the opening parentheses encountered. It iterates through the string character by character.  If an opening parenthesis is encountered, it is pushed onto the stack.  If a closing parenthesis is encountered, the code checks if the stack is not empty and if the top element of the stack is the corresponding opening parenthesis. If so, the opening parenthesis is popped from the stack.  If not, or if the stack is empty, the function returns `false`.  After processing all the characters, if the stack is empty, it means all parentheses are matched, and the function returns `true`.  Otherwise, it means there are unmatched parentheses, and the function returns `false`."},{id:169,title:"# Q169. Given a string, find the first unique character in the string.",text:void 0,code2:"```cpp<br>char firstUniqueChar(string s) {<br>  // Implement the logic here<br>}<br>```",choices:["1. `return ' ';`","2. `return s[0];`","3. `unordered_map<char, int> charCount;`<br>  `for (char c : s) {`<br>  `charCount[c]++;`<br>  `}`<br>  `for (int i = 0; i < s.size(); ++i) {`<br>  `if (charCount[s[i]] == 1) {`<br>  `return s[i];`<br>  `}`<br>  `}`<br>  `return ' ';`","4. `for (int i = 0; i < s.size(); ++i) {`<br>  `if (s.find(s[i]) == s.rfind(s[i])) {`<br>  `return s[i];`<br>  `}`<br>  `}`<br>  `return ' ';`"],answer:"3. `unordered_map<char, int> charCount;`<br>  `for (char c : s) {`<br>  `charCount[c]++;`<br>  `}`<br>  `for (int i = 0; i < s.size(); ++i) {`<br>  `if (charCount[s[i]] == 1) {`<br>  `return s[i];`<br>  `}`<br>  `}`<br>  `return ' ';`",solution:"```cpp<br>char firstUniqueChar(string s) {<br>  unordered_map<char, int> charCount;<br>  for (char c : s) {<br>    charCount[c]++;<br>  }<br>  for (int i = 0; i < s.size(); ++i) {<br>    if (charCount[s[i]] == 1) {<br>      return s[i];<br>    }<br>  }<br>  return ' ';<br>}<br>```<br><br>This code finds the first non-repeating character in a string. It uses an `unordered_map` to count the occurrences of each character in the string.  It then iterates through the string and checks if the count of the current character is 1. If so, it returns that character.  If no non-repeating character is found, it returns a space."},{id:170,title:"# Q170. Given an array of integers, find the two numbers that add up to a given target.",text:void 0,code2:"```cpp<br>vector<int> twoSum(vector<int>& nums, int target) {<br>  // Implement the logic here<br>}<br>```",choices:["1. `return {};`","2. `return {0, 1};`","3. `unordered_map<int, int> map;`<br>  `for (int i = 0; i < nums.size(); ++i) {`<br>  `int complement = target - nums[i];`<br>  `if (map.count(complement)) {`<br>  `return {map[complement], i};`<br>  `}`<br>  `map[nums[i]] = i;`<br>  `}`<br>  `return {};`","4. `for (int i = 0; i < nums.size(); ++i) {`<br>  `for (int j = i + 1; j < nums.size(); ++j) {`<br>  `if (nums[i] + nums[j] == target) {`<br>  `return {i, j};`<br>  `}`<br>  `}`<br>  `}`<br>  `return {};`"],answer:"3. `unordered_map<int, int> map;`<br>  `for (int i = 0; i < nums.size(); ++i) {`<br>  `int complement = target - nums[i];`<br>  `if (map.count(complement)) {`<br>  `return {map[complement], i};`<br>  `}`<br>  `map[nums[i]] = i;`<br>  `}`<br>  `return {};`",solution:"```cpp<br>vector<int> twoSum(vector<int>& nums, int target) {<br>  unordered_map<int, int> map;<br>  for (int i = 0; i < nums.size(); ++i) {<br>    int complement = target - nums[i];<br>    if (map.count(complement)) {<br>      return {map[complement], i};<br>    }<br>    map[nums[i]] = i;<br>  }<br>  return {};<br>}<br>```<br><br>This code finds the two numbers in an array that add up to a given target. It uses an `unordered_map` to store the numbers encountered in the array and their corresponding indices. It iterates through the array and calculates the complement for each number (the number that would add up to the target).  If the complement is found in the map, it means we have found the two numbers that add up to the target, and we return their indices.  Otherwise, we add the current number and its index to the map.  If no such pair is found, an empty vector is returned."},{id:171,title:"# Q171. Given an array of integers, find the maximum product of two numbers.",text:void 0,code2:"```cpp<br>int maxProduct(vector<int>& nums) {<br>  // Implement the logic here<br>}<br>```",choices:["1. `return nums[0] * nums[1];`","2. `return nums[nums.size() - 1] * nums[nums.size() - 2];`","3. `sort(nums.begin(), nums.end());`<br>  `return nums[nums.size() - 1] * nums[nums.size() - 2];`","4. `int max1 = INT_MIN, max2 = INT_MIN;`<br>  `for (int num : nums) {`<br>  `if (num > max1) {`<br>  `max2 = max1;`<br>  `max1 = num;`<br>  `} else if (num > max2) {`<br>  `max2 = num;`<br>  `}`<br>  `}`<br>  `return max1 * max2;`"],answer:"4. `int max1 = INT_MIN, max2 = INT_MIN;`<br>  `for (int num : nums) {`<br>  `if (num > max1) {`<br>  `max2 = max1;`<br>  `max1 = num;`<br>  `} else if (num > max2) {`<br>  `max2 = num;`<br>  `}`<br>  `}`<br>  `return max1 * max2;`",solution:"```cpp<br>int maxProduct(vector<int>& nums) {<br>  int max1 = INT_MIN, max2 = INT_MIN;<br>  for (int num : nums) {<br>    if (num > max1) {<br>      max2 = max1;<br>      max1 = num;<br>    } else if (num > max2) {<br>      max2 = num;<br>    }<br>  }<br>  return max1 * max2;<br>}<br>```<br><br>This code finds the maximum product of two numbers in an array.  It keeps track of the two largest numbers (`max1`, `max2`) in the array.  The code iterates through the array and updates these variables accordingly.  Finally, it returns the product of the two largest numbers (`max1 * max2`).  "},{id:173,title:"# Q173. Given an array of integers, find the sum of all even numbers in the array.",text:void 0,code2:"```cpp<br>int sumEvenNumbers(vector<int>& nums) {<br>  // Implement the logic here<br>}<br>```",choices:["1. `return 0;`","2. `return nums[0];`","3. `int sum = 0;`<br>  `for (int i = 0; i < nums.size(); ++i) {`<br>  `if (nums[i] % 2 == 0) {`<br>  `sum += nums[i];`<br>  `}`<br>  `}`<br>  `return sum;`","4. `return nums[nums.size() - 1];`"],answer:"3. `int sum = 0;`<br>  `for (int i = 0; i < nums.size(); ++i) {`<br>  `if (nums[i] % 2 == 0) {`<br>  `sum += nums[i];`<br>  `}`<br>  `}`<br>  `return sum;`",solution:"```cpp<br>int sumEvenNumbers(vector<int>& nums) {<br>  int sum = 0;<br>  for (int i = 0; i < nums.size(); ++i) {<br>    if (nums[i] % 2 == 0) {<br>      sum += nums[i];<br>    }<br>  }<br>  return sum;<br>}<br>```<br><br>This code finds the sum of all even numbers in an array.  It initializes a variable `sum` to 0.  It then iterates through the array and checks if each number is even using the modulo operator (`%`).  If the number is even, it is added to `sum`.  After iterating through the entire array, `sum` will contain the sum of all even numbers, which is then returned."},{id:174,title:"# Q174. Given an array of integers, find the product of all numbers in the array.",text:void 0,code2:"```cpp<br>int productOfNumbers(vector<int>& nums) {<br>  // Implement the logic here<br>}<br>```",choices:["1. `return 0;`","2. `return nums[0];`","3. `int product = 1;`<br>  `for (int i = 0; i < nums.size(); ++i) {`<br>  `product *= nums[i];`<br>  `}`<br>  `return product;`","4. `return nums[nums.size() - 1];`"],answer:"3. `int product = 1;`<br>  `for (int i = 0; i < nums.size(); ++i) {`<br>  `product *= nums[i];`<br>  `}`<br>  `return product;`",solution:"```cpp<br>int productOfNumbers(vector<int>& nums) {<br>  int product = 1;<br>  for (int i = 0; i < nums.size(); ++i) {<br>    product *= nums[i];<br>  }<br>  return product;<br>}<br>```<br><br>This code finds the product of all numbers in an array.  It initializes a variable `product` to 1.  It then iterates through the array and multiplies each number by `product`.  After iterating through the entire array, `product` will contain the product of all numbers, which is then returned."},{id:175,title:"# Q175. Given a string, find the number of vowels in the string.",text:void 0,code2:"```cpp<br>int countVowels(string s) {<br>  // Implement the logic here<br>}<br>```",choices:["1. `return 0;`","2. `return s.size();`","3. `int count = 0;`<br>  `for (char c : s) {`<br>  `if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {`<br>  `count++;`<br>  `}`<br>  `}`<br>  `return count;`","4. `return s.length();`"],answer:"3. `int count = 0;`<br>  `for (char c : s) {`<br>  `if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {`<br>  `count++;`<br>  `}`<br>  `}`<br>  `return count;`",solution:"```cpp<br>int countVowels(string s) {<br>  int count = 0;<br>  for (char c : s) {<br>    if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {<br>      count++;<br>    }<br>  }<br>  return count;<br>}<br>```<br><br>This code counts the number of vowels in a string. It initializes a variable `count` to 0.  It then iterates through the string and checks if each character is a vowel.  If it is, it increments `count`.  After iterating through the entire string, `count` will contain the number of vowels, which is then returned."},{id:176,title:"# Q176. Given a string, find the number of consonants in the string.",text:void 0,code2:"```cpp<br>int countConsonants(string s) {<br>  // Implement the logic here<br>}<br>```",choices:["1. `return 0;`","2. `return s.size();`","3. `int count = 0;`<br>  `for (char c : s) {`<br>  `if (isalpha(c) && !(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')) {`<br>  `count++;`<br>  `}`<br>  `}`<br>  `return count;`","4. `return s.length();`"],answer:"3. `int count = 0;`<br>  `for (char c : s) {`<br>  `if (isalpha(c) && !(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')) {`<br>  `count++;`<br>  `}`<br>  `}`<br>  `return count;`",solution:"```cpp<br>int countConsonants(string s) {<br>  int count = 0;<br>  for (char c : s) {<br>    if (isalpha(c) && !(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')) {<br>      count++;<br>    }<br>  }<br>  return count;<br>}<br>```<br><br>This code counts the number of consonants in a string. It initializes a variable `count` to 0.  It then iterates through the string and checks if each character is a letter using `isalpha(c)` and if it is not a vowel.  If it is a consonant, it increments `count`.  After iterating through the entire string, `count` will contain the number of consonants, which is then returned."},{id:177,title:"# Q177. Given a string, check if it is a valid email address.",text:void 0,code2:"```cpp<br>bool isValidEmail(string email) {<br>  // Implement the logic here<br>}<br>```",choices:["1. `return true;`","2. `return false;`",'3. `regex pattern("^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9\\-]+)\\.([a-zA-Z]{2,5})$^");`<br>  `return regex_match(email, pattern);`',"4. `if (email.find('@') == string::npos) {`<br>  `return false;`<br>  `}`<br>  `return true;`"],answer:'3. `regex pattern("^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9\\-]+)\\.([a-zA-Z]{2,5})$^");`<br>  `return regex_match(email, pattern);`',solution:'```cpp<br>bool isValidEmail(string email) {<br>  regex pattern("^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9\\-]+)\\.([a-zA-Z]{2,5})$^");<br>  return regex_match(email, pattern);<br>}<br>```<br><br>This code checks if a string is a valid email address using regular expressions. It defines a regular expression pattern that matches a typical email format (e.g., `username@domain.com`).  The `regex_match` function then compares the email string with the pattern. If the email matches the pattern, the function returns `true`.  Otherwise, it returns `false`.'},{id:178,title:"# Q178. Given a string, find the number of words in the string.",text:void 0,code2:"```cpp<br>int countWords(string s) {<br>  // Implement the logic here<br>}<br>```",choices:["1. `return 0;`","2. `return s.size();`","3. `int count = 1;`<br>  `for (char c : s) {`<br>  `if (c == ' ') {`<br>  `count++;`<br>  `}`<br>  `}`<br>  `return count;`","4. `return s.length();`"],answer:"3. `int count = 1;`<br>  `for (char c : s) {`<br>  `if (c == ' ') {`<br>  `count++;`<br>  `}`<br>  `}`<br>  `return count;`",solution:"```cpp<br>int countWords(string s) {<br>  int count = 1;<br>  for (char c : s) {<br>    if (c == ' ') {<br>      count++;<br>    }<br>  }<br>  return count;<br>}<br>```<br><br>This code counts the number of words in a string.  It initializes a variable `count` to 1 (assuming there is at least one word).  It then iterates through the string and checks if each character is a space.  If it is, it increments `count`.  After iterating through the entire string, `count` will contain the number of words, which is then returned."}];chrome.runtime.onMessage.addListener((n,a,i)=>{if(n.message==="getRandomQuestion"){console.log("Received getRandomQuestion message");let t=Date.now();if(console.log(t),t%6==0||t%7==0){const e=r[Math.floor(Math.random()*r.length)];console.log("Sending response for question:",e),i([e])}if(t%8==0||t%9==0){const e=s[Math.floor(Math.random()*r.length)];console.log("Sending response for question:",e),i([e])}if(t%2==1||t%3==3||t%3==0){const e=o[Math.floor(Math.random()*r.length)];console.log("Sending response for question:",e),i([e])}else{const e=r[Math.floor(Math.random()*r.length)];console.log("Sending response for question:",e),i([e])}}});chrome.runtime.onMessage.addListener((n,a,i)=>{if(n.type==="change_quiz")return chrome.tabs.query({active:!0,currentWindow:!0},t=>{chrome.tabs.sendMessage(t[0].id,n,e=>{i(e)})}),!0});
