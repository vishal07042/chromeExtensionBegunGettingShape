[
    {
        "id": 1,
        "question": "Write the main function in C++",
        "options": [
            { "id": "item1", "content": "return 0;" },
            { "id": "item2", "content": "int main() {" },
            { "id": "item3", "content": "    // Your code here" },
            { "id": "item4", "content": "}" }
        ],
        "correctAnswer": "int main() {\n    // Your code here\nreturn 0;\n}",
        "hints": [
            {"hint1": "The main function is the entry point of a C++ program."},
            {"hint2": "It is the first function that is executed when the program starts."},
            {"hint3": "It should return an integer value, typically 0 to indicate successful execution."},
            {"hint4": "It can take command-line arguments if needed."}
        ]
    },
    {
        "id": 2,
        "question": "Write a for loop in C++",
        "options": [
            { "id": "item1", "content": "for (int i = 0; i < n; i++) {" },
            { "id": "item2", "content": "    // Loop body" },
            { "id": "item3", "content": "}" },
            { "id": "item4", "content": "int n = 10;" }
        ],
        "correctAnswer": "int n = 10;\nfor (int i = 0; i < n; i++) {\n    // Loop body\n}",
        "hints": [
            {"hint1": "Use a for loop to iterate through the numbers from 0 to n."},
            {"hint2": "Initialize the loop variable i to 0."},
            {"hint3": "Increment the loop variable i in each iteration."},
            {"hint4": "Continue the loop until i is less than n."}
        ]
    },
    {
        "id": 3,
        "question": "Write a function to calculate the factorial of a number in C++",
        "options": [
            { "id": "item1", "content": "int factorial(int n) {" },
            { "id": "item2", "content": "    if (n == 0 || n == 1) {" },
            { "id": "item3", "content": "        return 1;" },
            { "id": "item4", "content": "    }" },
            { "id": "item5", "content": "    return n * factorial(n - 1);" },
            { "id": "item6", "content": "}" }
        ],
        "correctAnswer": "int factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}",
        "hints": [
            {"hint1": "Use recursion to calculate the factorial."},
            {"hint2": "Check if n is 0 or 1, return 1 if true."},
            {"hint3": "Otherwise, return n multiplied by the factorial of n - 1."},
            {"hint4": "This function will recursively call itself with n - 1 until the base case is reached."}
        ]
    },
    {
        "id": 4,
        "question": "Implement a binary search algorithm in C++",
        "options": [
            { "id": "item1", "content": "int binarySearch(int arr[], int l, int r, int x) {" },
            { "id": "item2", "content": "    if (r >= l) {" },
            { "id": "item3", "content": "        int mid = l + (r - l) / 2;" },
            { "id": "item4", "content": "        if (arr[mid] == x) return mid;" },
            { "id": "item5", "content": "        if (arr[mid] > x) return binarySearch(arr, l, mid - 1, x);" },
            { "id": "item6", "content": "        return binarySearch(arr, mid + 1, r, x);" },
            { "id": "item7", "content": "    }" },
            { "id": "item8", "content": "    return -1;" },
            { "id": "item9", "content": "}" }
        ],
        "correctAnswer": "int binarySearch(int arr[], int l, int r, int x) {\n    if (r >= l) {\n        int mid = l + (r - l) / 2;\n        if (arr[mid] == x) return mid;\n        if (arr[mid] > x) return binarySearch(arr, l, mid - 1, x);\n        return binarySearch(arr, mid + 1, r, x);\n    }\n    return -1;\n}",
        "hints": [
            {"hint1": "Binary search works on sorted arrays."},
            {"hint2": "It repeatedly divides the search interval in half."},
            {"hint3": "If the value of the search key is less than the item in the middle of the interval, narrow the interval to the lower half."},
            {"hint4": "Otherwise, narrow it to the upper half."}
        ]
    },
    {
        "id": 5,
        "question": "Implement a function to reverse a linked list in C++",
        "options": [
            { "id": "item1", "content": "struct Node {" },
            { "id": "item2", "content": "    int data;" },
            { "id": "item3", "content": "    Node* next;" },
            { "id": "item4", "content": "};" },
            { "id": "item5", "content": "Node* reverse(Node* head) {" },
            { "id": "item6", "content": "    Node* prev = NULL;" },
            { "id": "item7", "content": "    Node* current = head;" },
            { "id": "item8", "content": "    Node* next = NULL;" },
            { "id": "item9", "content": "    while (current != NULL) {" },
            { "id": "item10", "content": "        next = current->next;" },
            { "id": "item11", "content": "        current->next = prev;" },
            { "id": "item12", "content": "        prev = current;" },
            { "id": "item13", "content": "        current = next;" },
            { "id": "item14", "content": "    }" },
            { "id": "item15", "content": "    return prev;" },
            { "id": "item16", "content": "}" }
        ],
        "correctAnswer": "Node* reverse(Node* head) {\n    Node* prev = NULL;\n    Node* current = head;\n    Node* next = NULL;\n    while (current != NULL) {\n        next = current->next;\n        current->next = prev;\n        prev = current;\n        current = next;\n    }\n    return prev;\n}",
        "hints": [
            {"hint1": "Use three pointers: previous, current, and next."},
            {"hint2": "Iterate through the list and reverse the links."},
            {"hint3": "At the end, the previous pointer will be the new head of the reversed list."},
            {"hint4": "Make sure to handle the edge case where the list is empty."}
        ]
    },
    {
        "id": 6,
        "question": "Implement a function to find the maximum element in a binary tree in C++",
        "options": [
            { "id": "item1", "content": "struct Node {" },
            { "id": "item2", "content": "    int data;" },
            { "id": "item3", "content": "    Node* left, *right;" },
            { "id": "item4", "content": "};" },
            { "id": "item5", "content": "int findMax(Node* root) {" },
            { "id": "item6", "content": "    if (root == NULL) return INT_MIN;" },
            { "id": "item7", "content": "    int res = root->data;" },
            { "id": "item8", "content": "    int lres = findMax(root->left);" },
            { "id": "item9", "content": "    int rres = findMax(root->right);" },
            { "id": "item10", "content": "    if (lres > res) res = lres;" },
            { "id": "item11", "content": "    if (rres > res) res = rres;" },
            { "id": "item12", "content": "    return res;" },
            { "id": "item13", "content": "}" }
        ],
        "correctAnswer": "int findMax(Node* root) {\n    if (root == NULL) return INT_MIN;\n    int res = root->data;\n    int lres = findMax(root->left);\n    int rres = findMax(root->right);\n    if (lres > res) res = lres;\n    if (rres > res) res = rres;\n    return res;\n}",
        "hints": [
            {"hint1": "Use recursion to traverse the tree."},
            {"hint2": "Compare the current node's value with the maximum values of the left and right subtrees."},
            {"hint3": "Return the maximum value found."},
            {"hint4": "Consider the base case where the tree is empty."}
        ]
    },
    {
        "id": 7,
        "question": "Implement a function to check if a string is a palindrome in C++",
        "options": [
            { "id": "item1", "content": "bool isPalindrome(string str) {" },
            { "id": "item2", "content": "    int l = 0;" },
            { "id": "item3", "content": "    int h = str.length() - 1;" },
            { "id": "item4", "content": "    while (h > l) {" },
            { "id": "item5", "content": "        if (str[l++] != str[h--]) {" },
            { "id": "item6", "content": "            return false;" },
            { "id": "item7", "content": "        }" },
            { "id": "item8", "content": "    }" },
            { "id": "item9", "content": "    return true;" },
            { "id": "item10", "content": "}" }
        ],
        "correctAnswer": "bool isPalindrome(string str) {\n    int l = 0;\n    int h = str.length() - 1;\n    while (h > l) {\n        if (str[l++] != str[h--]) {\n            return false;\n        }\n    }\n    return true;\n}",
        "hints": [
            {"hint1": "Use two pointers, one starting from the beginning and the other from the end of the string."},
            {"hint2": "Compare the characters at these pointers and move them towards the center."},
            {"hint3": "If all characters match, the string is a palindrome."},
            {"hint4": "Consider edge cases like empty strings and single-character strings."}
        ]
    },
    {
        "id": 8,
        "question": "Implement a function to find the length of the longest increasing subsequence in C++",
        "options": [
            { "id": "item1", "content": "int longestIncreasingSubsequence(int arr[], int n) {" },
            { "id": "item2", "content": "    int lis[n];" },
            { "id": "item3", "content": "    lis[0] = 1;" },
            { "id": "item4", "content": "    for (int i = 1; i < n; i++) {" },
            { "id": "item5", "content": "        lis[i] = 1;" },
            { "id": "item6", "content": "        for (int j = 0; j < i; j++) {" },
            { "id": "item7", "content": "            if (arr[i] > arr[j] && lis[i] < lis[j] + 1) {" },
            { "id": "item8", "content": "                lis[i] = lis[j] + 1;" },
            { "id": "item9", "content": "            }" },
            { "id": "item10", "content": "        }" },
            { "id": "item11", "content": "    }" },
            { "id": "item12", "content": "    return *max_element(lis, lis + n);" },
            { "id": "item13", "content": "}" }
        ],
        "correctAnswer": "int longestIncreasingSubsequence(int arr[], int n) {\n    int lis[n];\n    lis[0] = 1;\n    for (int i = 1; i < n; i++) {\n        lis[i] = 1;\n        for (int j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && lis[i] < lis[j] + 1) {\n                lis[i] = lis[j] + 1;\n            }\n        }\n    }\n    return *max_element(lis, lis + n);\n}",
        "hints": [
            {"hint1": "Use dynamic programming to solve this problem."},
            {"hint2": "Create an array to store the length of the longest increasing subsequence ending at each index."},
            {"hint3": "Iterate through the array and update the lengths based on previous values."},
            {"hint4": "The final answer will be the maximum value in the array."}
        ]
    },
    {
        "id": 9,
        "question": "Implement a function to merge two sorted arrays in C++",
        "options": [
            { "id": "item1", "content": "void merge(int arr1[], int arr2[], int n1, int n2, int arr3[]) {" },
            { "id": "item2", "content": "    int i = 0, j = 0, k = 0;" },
            { "id": "item3", "content": "    while (i < n1 && j < n2) {" },
            { "id": "item4", "content": "        if (arr1[i] < arr2[j]) {" },
            { "id": "item5", "content": "            arr3[k++] = arr1[i++];" },
            { "id": "item6", "content": "        } else {" },
            { "id": "item7", "content": "            arr3[k++] = arr2[j++];" },
            { "id": "item8", "content": "        }" },
            { "id": "item9", "content": "    }" },
            { "id": "item10", "content": "    while (i < n1) {" },
            { "id": "item11", "content": "        arr3[k++] = arr1[i++];" },
            { "id": "item12", "content": "    }" },
            { "id": "item13", "content": "    while (j < n2) {" },
            { "id": "item14", "content": "        arr3[k++] = arr2[j++];" },
            { "id": "item15", "content": "    }" },
            { "id": "item16", "content": "}" }
        ],
        "correctAnswer": "void merge(int arr1[], int arr2[], int n1, int n2, int arr3[]) {\n    int i = 0, j = 0, k = 0;\n    while (i < n1 && j < n2) {\n        if (arr1[i] < arr2[j]) {\n            arr3[k++] = arr1[i++];\n        } else {\n            arr3[k++] = arr2[j++];\n        }\n    }\n    while (i < n1) {\n        arr3[k++] = arr1[i++];\n    }\n    while (j < n2) {\n        arr3[k++] = arr2[j++];\n    }\n}",
        "hints": [
            {"hint1": "Use three pointers to keep track of the current index of each array."},
            {"hint2": "Compare the elements of the two arrays and add the smaller one to the merged array."},
            {"hint3": "Continue until all elements are merged."},
            {"hint4": "Handle the remaining elements of the arrays after one of them is exhausted."}
        ]
    }
]